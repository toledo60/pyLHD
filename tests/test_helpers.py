import numpy as np
from scipy.stats import qmc
import pytest
from pytest import approx
from pyLHD.helpers import distance_matrix

sampler = qmc.LatinHypercube(d=2, strength=2, seed=88)
sample = sampler.random(n=9)


def test_design():
  design = np.array([[0.20157202, 0.20157202],
                     [0.53490535, 0.05646416],
                     [0.86823868, 0.22523203],
                     [0.05646416, 0.53490535],
                     [0.38979749, 0.38979749],
                     [0.72313082, 0.55856536],
                     [0.22523203, 0.86823868],
                     [0.55856536, 0.72313082],
                     [0.8918987,  0.8918987]])
  np.testing.assert_allclose(sample, design, rtol=1e-06)


def test_euclidean_distance():
  dist_test1 = np.array([[0.0000000, 0.3635483, 0.6670864, 0.3635483,
                          0.2661910, 0.6320347, 0.6670864, 0.6320347, 0.9762694],
                         [0.3635483, 0.0000000, 0.3736224, 0.6766180, 0.3635483,
                          0.5362224, 0.8688357, 0.6670864, 0.9085126],
                         [0.6670864, 0.3736224, 0.0000000, 0.8688357, 0.5059523,
                          0.3635483, 0.9093487, 0.5863453, 0.6670864],
                         [0.3635483, 0.6766180, 0.8688357, 0.0000000, 0.3635483,
                          0.6670864, 0.3736224, 0.5362224, 0.9085126],
                         [0.2661910, 0.3635483, 0.5059523, 0.3635483, 0.0000000,
                          0.3736224, 0.5059523, 0.3736224, 0.7100783],
                         [0.6320347, 0.5362224, 0.3635483, 0.6670864, 0.3736224,
                          0.0000000, 0.5863453, 0.2327307, 0.3736224],
                         [0.6670864, 0.8688357, 0.9093487, 0.3736224, 0.5059523,
                          0.5863453, 0.0000000, 0.3635483, 0.6670864],
                         [0.6320347, 0.6670864, 0.5863453, 0.5362224, 0.3736224,
                          0.2327307, 0.3635483, 0.0000000, 0.3736224],
                         [0.9762694, 0.9085126, 0.6670864, 0.9085126, 0.7100783,
                          0.3736224, 0.6670864, 0.3736224, 0.0000000]])
  np.testing.assert_allclose(distance_matrix(sample), dist_test1, rtol=1e-06)


def test_manhattan_distance():
  dist_test2 = np.array([[0.0000000, 0.4784412, 0.6903267, 0.4784412, 0.3764509, 0.8785521,
                          0.6903267, 0.8785521, 1.3806534],
                         [0.4784412, 0.0000000, 0.5021012, 0.9568824, 0.4784412,
                          0.6903267, 1.1214478, 0.6903267, 1.1924279],
                         [0.6903267, 0.5021012, 0.0000000, 1.1214478, 0.6430067,
                          0.4784412, 1.2860133, 0.8075721, 0.6903267],
                         [0.4784412, 0.9568824, 1.1214478, 0.0000000, 0.4784412,
                          0.6903267, 0.5021012, 0.6903267, 1.1924279],
                         [0.3764509, 0.4784412, 0.6430067, 0.4784412, 0.0000000,
                          0.5021012, 0.6430067, 0.5021012, 1.0042024],
                         [0.8785521, 0.6903267, 0.4784412, 0.6903267, 0.5021012,
                          0.0000000, 0.8075721, 0.3291309, 0.5021012],
                         [0.6903267, 1.1214478, 1.2860133, 0.5021012, 0.6430067,
                          0.8075721, 0.0000000, 0.4784412, 0.6903267],
                         [0.8785521, 0.6903267, 0.8075721, 0.6903267, 0.5021012,
                          0.3291309, 0.4784412, 0.0000000, 0.5021012],
                         [1.3806534, 1.1924279, 0.6903267, 1.1924279, 1.0042024,
                         0.5021012, 0.6903267, 0.5021012, 0.0000000]])
  np.testing.assert_allclose(distance_matrix(sample, metric='manhattan'), dist_test2, rtol=1e-06)


def test_minkowski_distance_p2():
  dist_test3 = np.array([[0., 0.36354835, 0.66708637, 0.36354835, 0.26619101,
                          0.63203467, 0.66708637, 0.63203467, 0.97626935],
                         [0.36354835, 0., 0.37362241, 0.67661802, 0.36354835,
                          0.53622238, 0.86883568, 0.66708637, 0.90851259],
                         [0.66708637, 0.37362241, 0., 0.86883568, 0.50595233,
                          0.36354835, 0.90934873, 0.58634527, 0.66708639],
                         [0.36354835, 0.67661802, 0.86883568, 0., 0.36354835,
                          0.66708637, 0.37362241, 0.53622238, 0.90851259],
                         [0.26619101, 0.36354835, 0.50595233, 0.36354835, 0.,
                          0.37362241, 0.50595233, 0.37362241, 0.71007834],
                         [0.63203467, 0.53622238, 0.36354835, 0.66708637, 0.37362241,
                          0., 0.58634527, 0.23273071, 0.37362242],
                         [0.66708637, 0.86883568, 0.90934873, 0.37362241, 0.50595233,
                          0.58634527, 0., 0.36354835, 0.66708639],
                         [0.63203467, 0.66708637, 0.58634527, 0.53622238, 0.37362241,
                          0.23273071, 0.36354835, 0., 0.37362242],
                         [0.97626935, 0.90851259, 0.66708639, 0.90851259, 0.71007834,
                          0.37362242, 0.66708639, 0.37362242, 0.]])
  np.testing.assert_allclose(distance_matrix(sample, metric='minkowski'), dist_test3, rtol=1e-06)


def test_minkowski_distance_p7():
  dist_test4 = np.array([[0., 0.33347423, 0.66666666, 0.33347423, 0.20781777,
                          0.52665165, 0.66666666, 0.52665165, 0.76218245],
                         [0.33347423, 0., 0.33373798, 0.5282419, 0.33347423,
                          0.50217579, 0.81191079, 0.66666666, 0.83574468],
                         [0.66666666, 0.33373798, 0., 0.81191079, 0.47848011,
                          0.33347423, 0.7099369, 0.50042097, 0.66666667],
                         [0.33347423, 0.5282419, 0.81191079, 0., 0.33347423,
                          0.66666666, 0.33373798, 0.50217579, 0.83574468],
                         [0.20781777, 0.33347423, 0.47848011, 0.33347423, 0.,
                          0.33373798, 0.47848011, 0.33373798, 0.55436468],
                         [0.52665165, 0.50217579, 0.33347423, 0.66666666, 0.33373798,
                          0., 0.50042097, 0.181695, 0.33373799],
                         [0.66666666, 0.81191079, 0.7099369, 0.33373798, 0.47848011,
                          0.50042097, 0., 0.33347423, 0.66666667],
                         [0.52665165, 0.66666666, 0.50042097, 0.50217579, 0.33373798,
                          0.181695, 0.33347423, 0., 0.33373799],
                         [0.76218245, 0.83574468, 0.66666667, 0.83574468, 0.55436468,
                          0.33373799, 0.66666667, 0.33373799, 0.]])
  np.testing.assert_allclose(distance_matrix(sample, metric='minkowski', p=7), dist_test4, rtol=1e-06)


def test_maximum_distance():
  dist_test5 = np.array([[0., 0.33333333, 0.66666666, 0.33333333, 0.18822547,
                          0.5215588, 0.66666666, 0.5215588, 0.69032668],
                         [0.33333333, 0., 0.33333333, 0.47844119, 0.33333333,
                          0.5021012, 0.81177452, 0.66666666, 0.83543454],
                         [0.66666666, 0.33333333, 0., 0.81177452, 0.47844119,
                          0.33333333, 0.64300665, 0.49789879, 0.66666667],
                         [0.33333333, 0.47844119, 0.81177452, 0., 0.33333333,
                          0.66666666, 0.33333333, 0.5021012, 0.83543454],
                         [0.18822547, 0.33333333, 0.47844119, 0.33333333, 0.,
                          0.33333333, 0.47844119, 0.33333333, 0.50210121],
                         [0.5215588, 0.5021012, 0.33333333, 0.66666666, 0.33333333,
                          0., 0.49789879, 0.16456546, 0.33333334],
                         [0.66666666, 0.81177452, 0.64300665, 0.33333333, 0.47844119,
                          0.49789879, 0., 0.33333333, 0.66666667],
                         [0.5215588, 0.66666666, 0.49789879, 0.5021012, 0.33333333,
                          0.16456546, 0.33333333, 0., 0.33333334],
                         [0.69032668, 0.83543454, 0.66666667, 0.83543454, 0.50210121,
                          0.33333334, 0.66666667, 0.33333334, 0.]])
  np.testing.assert_allclose(distance_matrix(sample, metric='maximum'), dist_test5, rtol=1e-06)