# base_designs.rLHD { #pyLHD.base_designs.rLHD }

`base_designs.rLHD(n_rows, n_columns, unit_cube=False)`

Generate a random Latin Hypercube Design (LHD)

## Parameters

| Name        | Type   | Description                                               | Default    |
|-------------|--------|-----------------------------------------------------------|------------|
| `n_rows`    | int    | A positive integer specifying the number of rows          | _required_ |
| `n_columns` | int    | A postive integer specifying the number of columns        | _required_ |
| `unit_cube` | bool   | If True, design will be in the unit cube [0,1]^n_columns. | `False`    |

## Returns

| Type          | Description                               |
|---------------|-------------------------------------------|
| npt.ArrayLike | return a random (n_rows by n_columns) LHD |

## Examples



```{python}
import pyLHD
pyLHD.rLHD(n_rows=5,n_columns = 4,unit_cube = False)
```
```{python}
pyLHD.rLHD(n_rows=5,n_columns = 4, unit_cube = True)
```