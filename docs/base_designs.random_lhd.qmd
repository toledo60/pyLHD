# base_designs.random_lhd { #pyLHD.base_designs.random_lhd }

`base_designs.random_lhd(n_rows, n_columns, scramble=True, seed=None)`

Generate a random Latin Hypercube Design

## Parameters

| Name        | Type             | Description                                                                                                                                              | Default    |
|-------------|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------|------------|
| `n_rows`    | int              | number of rows (number of samples)                                                                                                                       | _required_ |
| `n_columns` | int              | number of columns (dimnesion of parameter space)                                                                                                         | _required_ |
| `scramble`  | Optional\[bool\] | When False, center samples within cells of a multi-dimensional grid.  Otherwise, samples are randomly placed within cells of the grid. Defaults to True. | `True`     |
| `seed`      | Optional\[int\]  | If seed is an int or None, a new numpy.random.Generator is created using np.random.default_rng(seed). Defaults to None.                                  | `None`     |

## Returns

| Type          | Description                                                                                                                                                                                                                 |
|---------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| npt.ArrayLike | A Latin hypercube sample of $n =$ `n_rows` points generated in $[0,1)^d$, where $d$=`n_columns`.  Each univariate marginal distribution is stratisfied, placing exactly one point in  $[j/n,(j+1)/n)$ for $j=0,1,\dots,n-1$ |

## Examples



```{python}
import pyLHD
pyLHD.random_lhd(n_rows = 5, n_columns = 3, seed = 1)
```
```{python}
pyLHD.random_lhd(n_rows = 5, n_columns = 3, seed = 1, scramble = False)
```