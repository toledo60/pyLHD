[
  {
    "objectID": "reference/orthogonal.OLHD_Lin09.html",
    "href": "reference/orthogonal.OLHD_Lin09.html",
    "title": "orthogonal.OLHD_Lin09",
    "section": "",
    "text": "orthogonal.OLHD_Lin09(OLHD, OA)\nOrthogonal Latin Hypercube Design. Based on the construction method of Lin et al. (2009)"
  },
  {
    "objectID": "reference/orthogonal.OLHD_Lin09.html#parameters",
    "href": "reference/orthogonal.OLHD_Lin09.html#parameters",
    "title": "orthogonal.OLHD_Lin09",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nOLHD\n[type]\nAn orthogonal Latin hypercube design with run size (n) and factor size (p), and it will be coupled with the input orthogonal array\nrequired\n\n\nOA\n[type]\nAn orthogonal array, with (n^2) rows, (2f) columns, (n) symbols, strength two and index unity is available, which can be denoted as OA(n^2,2f,n,2)\nrequired"
  },
  {
    "objectID": "reference/orthogonal.OLHD_Lin09.html#returns",
    "href": "reference/orthogonal.OLHD_Lin09.html#returns",
    "title": "orthogonal.OLHD_Lin09",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nOrthogonal Latin hypercube design with the following run size: (n^2) and the following factor size: (2fp)"
  },
  {
    "objectID": "reference/orthogonal.OLHD_Lin09.html#examples",
    "href": "reference/orthogonal.OLHD_Lin09.html#examples",
    "title": "orthogonal.OLHD_Lin09",
    "section": "Examples",
    "text": "Examples\nCreate a 5 by 2 OLHD\n\nimport pyLHD\nOLHD_example = pyLHD.OLHD_Cioppa07(m=2)\n\nCreate an OA(25,6,5,2)\n\nimport numpy as np\nOA_example = np.array([ [2,2,2,2,2,1],[2,1,5,4,3,5],\n                        [3,2,1,5,4,5],[1,5,4,3,2,5],\n                        [4,1,3,5,2,3],[1,2,3,4,5,2],\n                        [1,3,5,2,4,3],[1,1,1,1,1,1],\n                        [4,3,2,1,5,5],[5,5,5,5,5,1],\n                        [4,4,4,4,4,1],[3,1,4,2,5,4],\n                        [3,3,3,3,3,1],[3,5,2,4,1,3],\n                        [3,4,5,1,2,2],[5,4,3,2,1,5],\n                        [2,3,4,5,1,2],[2,5,3,1,4,4],\n                        [1,4,2,5,3,4],[4,2,5,3,1,4],\n                        [2,4,1,3,5,3],[5,3,1,4,2,4],\n                        [5,2,4,1,3,3],[5,1,2,3,4,2],\n                        [4,5,1,2,3,2]   ])\n\nConstruct a 25 by 12 OLHD\n\npyLHD.OLHD_Lin09(OLHD = OLHD_example,OA = OA_example)\n\narray([[ 12.,  -8.,  12.,  -8.,   7.,  -9.,   6.,  -4.,   6.,  -4.,  -9.,\n         -7.],\n       [  7.,  -9.,  -7.,   9., -10.,  -2.,  -9.,  -7.,   9.,   7.,  -5.,\n         -1.],\n       [ 10.,   2.,  -9.,  -7., -11.,   3.,   5.,   1.,  -7.,   9.,  -3.,\n        -11.],\n       [ -9.,  -7.,  -1.,   5.,  -8., -12.,  -7.,   9.,   2., -10.,  -4.,\n         -6.],\n       [  4.,   6., -10.,  -2.,   2., -10.,  -8., -12.,  -5.,  -1.,   1.,\n         -5.],\n       [ 11.,  -3.,  -5.,  -1.,   8.,  12.,   3.,  11.,  10.,   2.,   4.,\n          6.],\n       [  1.,  -5.,   8.,  12.,  -1.,   5.,  -2.,  10.,   4.,   6.,   2.,\n        -10.],\n       [  6.,  -4.,   6.,  -4.,   6.,  -4., -12.,   8., -12.,   8., -12.,\n          8.],\n       [ -1.,   5.,   7.,  -9., -12.,   8.,   2., -10.,  -9.,  -7.,  -6.,\n          4.],\n       [-12.,   8., -12.,   8.,   3.,  11.,  -6.,   4.,  -6.,   4., -11.,\n          3.],\n       [ -6.,   4.,  -6.,   4.,   4.,   6.,  12.,  -8.,  12.,  -8.,  -8.,\n        -12.],\n       [  5.,   1.,   9.,   7.,  -7.,   9., -10.,  -2.,   7.,  -9.,   9.,\n          7.],\n       [  0.,   0.,   0.,   0.,   5.,   1.,   0.,   0.,   0.,   0., -10.,\n         -2.],\n       [-10.,  -2.,  -3., -11.,   1.,  -5.,  -5.,  -1.,  11.,  -3.,  -2.,\n         10.],\n       [ -5.,  -1.,   3.,  11.,  12.,  -8.,  10.,   2., -11.,   3.,   6.,\n         -4.],\n       [ -7.,   9.,  10.,   2.,  -9.,  -7.,   9.,   7.,   5.,   1.,  -7.,\n          9.],\n       [  2., -10., -11.,   3.,  11.,  -3.,   1.,  -5.,  -3., -11.,   3.,\n         11.],\n       [ -8., -12.,   5.,   1.,  -6.,   4.,  -4.,  -6., -10.,  -2.,  12.,\n         -8.],\n       [ -4.,  -6.,  -8., -12.,  -5.,  -1.,   8.,  12.,  -4.,  -6.,  10.,\n          2.],\n       [  9.,   7.,  -2.,  10.,  -4.,  -6.,   7.,  -9.,  -1.,   5.,   8.,\n         12.],\n       [ -3., -11.,   1.,  -5.,  -2.,  10.,  11.,  -3.,  -2.,  10.,  -1.,\n          5.],\n       [ -2.,  10.,  -4.,  -6.,  -3., -11.,  -1.,   5.,   8.,  12.,  11.,\n         -3.],\n       [  8.,  12.,   4.,   6.,   0.,   0.,   4.,   6.,  -8., -12.,   0.,\n          0.],\n       [  3.,  11.,   2., -10.,   9.,   7., -11.,   3.,   1.,  -5.,   7.,\n         -9.],\n       [-11.,   3.,  11.,  -3.,  10.,   2.,  -3., -11.,   3.,  11.,   5.,\n          1.]])"
  },
  {
    "objectID": "reference/helpers.permute_columns.html",
    "href": "reference/helpers.permute_columns.html",
    "title": "helpers.permute_columns",
    "section": "",
    "text": "helpers.permute_columns(arr, columns=None, seed=None)\nRandomly permute columns in a numpy ndarray"
  },
  {
    "objectID": "reference/helpers.permute_columns.html#parameters",
    "href": "reference/helpers.permute_columns.html#parameters",
    "title": "helpers.permute_columns",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnpt.ArrayLike\nA numpy ndarray\nrequired\n\n\ncolumns\nOptional[List[int]]\nIf columns is None all columns will be randomly permuted, otherwise provide a list of columns to permute. Defaults to None.\nNone\n\n\nseed\nOptional[Union[int, np.random.Generator]])\nIf seedis an integer or None, a new numpy.random.Generator is created using np.random.default_rng(seed). If seed is already a `Generator instance, then the provided instance is used. Defaults to None.\nNone"
  },
  {
    "objectID": "reference/helpers.permute_columns.html#returns",
    "href": "reference/helpers.permute_columns.html#returns",
    "title": "helpers.permute_columns",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nnumpy ndarray with columns of choice randomly permuted"
  },
  {
    "objectID": "reference/helpers.permute_columns.html#examples",
    "href": "reference/helpers.permute_columns.html#examples",
    "title": "helpers.permute_columns",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\nx = pyLHD.LatinHypercube(size = (5,3), seed = 1)\nx\n\narray([[0.70930042, 0.30930042, 0.10930042],\n       [0.90930042, 0.50930042, 0.90930042],\n       [0.10930042, 0.70930042, 0.30930042],\n       [0.50930042, 0.90930042, 0.70930042],\n       [0.30930042, 0.10930042, 0.50930042]])\n\n\nPermute all columns\n\npyLHD.permute_columns(x)\n\narray([[0.50930042, 0.50930042, 0.90930042],\n       [0.10930042, 0.30930042, 0.10930042],\n       [0.30930042, 0.90930042, 0.50930042],\n       [0.90930042, 0.10930042, 0.30930042],\n       [0.70930042, 0.70930042, 0.70930042]])\n\n\nPermute columns [0,1] with seed=1\n\npyLHD.permute_columns(x, columns = [0,1], seed = 1)\n\narray([[0.30930042, 0.90930042, 0.10930042],\n       [0.70930042, 0.30930042, 0.90930042],\n       [0.90930042, 0.50930042, 0.30930042],\n       [0.10930042, 0.10930042, 0.70930042],\n       [0.50930042, 0.70930042, 0.50930042]])"
  },
  {
    "objectID": "reference/helpers.is_LHD.html",
    "href": "reference/helpers.is_LHD.html",
    "title": "helpers.is_LHD",
    "section": "",
    "text": "helpers.is_LHD(arr)\nVerify Latinhypercube sampling conditions\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnpt.ArrayLike\nA numpy ndarray\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nValueError\nIf arr is not in unit hypercube\n\n\nValueError\nSum of integers for each column dont add up to n_rows * (n_rows + 1) / 2\n\n\nValueError\nEach integer must appear once per column"
  },
  {
    "objectID": "reference/helpers.is_LHD.html#parameters",
    "href": "reference/helpers.is_LHD.html#parameters",
    "title": "helpers.is_LHD",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\narr\nnpt.ArrayLike\nA numpy ndarray\nrequired"
  },
  {
    "objectID": "reference/helpers.is_LHD.html#raises",
    "href": "reference/helpers.is_LHD.html#raises",
    "title": "helpers.is_LHD",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nValueError\nIf arr is not in unit hypercube\n\n\nValueError\nSum of integers for each column dont add up to n_rows * (n_rows + 1) / 2\n\n\nValueError\nEach integer must appear once per column"
  },
  {
    "objectID": "reference/helpers.distance_matrix.html",
    "href": "reference/helpers.distance_matrix.html",
    "title": "helpers.distance_matrix",
    "section": "",
    "text": "helpers.distance_matrix(arr, metric='euclidean', p=2)\nDistance matrix based on specified distance measure"
  },
  {
    "objectID": "reference/helpers.distance_matrix.html#parameters",
    "href": "reference/helpers.distance_matrix.html#parameters",
    "title": "helpers.distance_matrix",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnumpy.ndarray\nA design matrix\nrequired\n\n\nmetric\nstr\nSpecifiy the following distance measure: ‘euclidean’: Usual distance between the two vectors (L_2 norm) ‘maximum’: Maximum distance between two components of x and y (supremum norm) ‘manhattan’: Absolute distance between the two vectors (L_1 norm) ‘minkowski’: The p norm, the pth root of the sum of the pth powers of the differences of the components\n'euclidean'\n\n\np\nint\nThe power of the Minkowski distance. Defaults to 2.\n2"
  },
  {
    "objectID": "reference/helpers.distance_matrix.html#returns",
    "href": "reference/helpers.distance_matrix.html#returns",
    "title": "helpers.distance_matrix",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nThe calculated distance matrix baed on specified distance measure"
  },
  {
    "objectID": "reference/helpers.distance_matrix.html#examples",
    "href": "reference/helpers.distance_matrix.html#examples",
    "title": "helpers.distance_matrix",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\nrandom_lhd = pyLHD.LatinHypercube(size = (5,3))\npyLHD.distance_matrix(random_lhd)\n\narray([[0.        , 0.6       , 0.66332496, 1.07703296, 0.66332496],\n       [0.6       , 0.        , 1.0198039 , 0.74833148, 0.48989795],\n       [0.66332496, 1.0198039 , 0.        , 1.0198039 , 0.69282032],\n       [1.07703296, 0.74833148, 1.0198039 , 0.        , 0.48989795],\n       [0.66332496, 0.48989795, 0.69282032, 0.48989795, 0.        ]])\n\n\n\npyLHD.distance_matrix(random_lhd, metric = 'manhattan')\n\narray([[0. , 1. , 1. , 1.8, 1. ],\n       [1. , 0. , 1.6, 1.2, 0.8],\n       [1. , 1.6, 0. , 1.6, 1.2],\n       [1.8, 1.2, 1.6, 0. , 0.8],\n       [1. , 0.8, 1.2, 0.8, 0. ]])\n\n\n\npyLHD.distance_matrix(random_lhd, metric = 'minkowski', p=5)\n\narray([[0.        , 0.46090632, 0.60098442, 0.83898042, 0.60098442],\n       [0.46090632, 0.        , 0.83493727, 0.61547698, 0.40487949],\n       [0.60098442, 0.83493727, 0.        , 0.83493727, 0.49829238],\n       [0.83898042, 0.61547698, 0.83493727, 0.        , 0.40487949],\n       [0.60098442, 0.40487949, 0.49829238, 0.40487949, 0.        ]])"
  },
  {
    "objectID": "reference/criteria.pairwise_InterSite.html",
    "href": "reference/criteria.pairwise_InterSite.html",
    "title": "criteria.pairwise_InterSite",
    "section": "",
    "text": "criteria.pairwise_InterSite(arr, q=1, axis=0)\nCalculate the Inter-site Distance between all pairwise (rows/columns)"
  },
  {
    "objectID": "reference/criteria.pairwise_InterSite.html#parameters",
    "href": "reference/criteria.pairwise_InterSite.html#parameters",
    "title": "criteria.pairwise_InterSite",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnpt.ArrayLike\nA numpy ndarray\nrequired\n\n\nq\nint\nThe default is set to be 1, and it could be either 1 or 2. If (q) is 1, (inter_site) is the Manhattan (rectangular) distance. If (q) is 2, (inter_site) is the Euclidean distance.\n1\n\n\naxis\nint\nThe default is set to be 0, and it coult be either 1 or 0. If (axis) is 0 compute Inter-site distance row-wise otherwise columnwise.\n0"
  },
  {
    "objectID": "reference/criteria.pairwise_InterSite.html#returns",
    "href": "reference/criteria.pairwise_InterSite.html#returns",
    "title": "criteria.pairwise_InterSite",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nAll (row/column) pairwise Inter-site distances (rectangular or Euclidean)"
  },
  {
    "objectID": "reference/criteria.pairwise_InterSite.html#examples",
    "href": "reference/criteria.pairwise_InterSite.html#examples",
    "title": "criteria.pairwise_InterSite",
    "section": "Examples",
    "text": "Examples\nCalculate all row pairwise inter-site distances of random_lhd with q=1 (rectangular)\n\nimport pyLHD\nrandom_lhd = pyLHD.LatinHypercube(size = (10,3))\npyLHD.pairwise_InterSite(random_lhd)\n\narray([0.8, 1.5, 1.5, 1.5, 1.1, 1.6, 1. , 0.7, 1.8, 1.1, 1.5, 1.1, 0.9,\n       1.2, 1.4, 0.3, 1. , 1.2, 0.8, 1.6, 0.7, 0.9, 1. , 1.3, 0.6, 1.2,\n       1.1, 0.9, 1.2, 1.1, 1.2, 0.5, 1.1, 1. , 0.7, 1.3, 1.1, 0.8, 0.9,\n       1.4, 1.1, 0.8, 1.1, 1.8, 1.1])\n\n\nCalculate all column pairwise inter-site distances of random_lhd with q=2 (Euclidean)\n\npyLHD.pairwise_InterSite(random_lhd,q=2, axis = 1)\n\narray([1.6881943 , 0.92195445, 1.20415946])"
  },
  {
    "objectID": "reference/criteria.AvgAbsCor.html",
    "href": "reference/criteria.AvgAbsCor.html",
    "title": "criteria.AvgAbsCor",
    "section": "",
    "text": "criteria.AvgAbsCor(arr)\nCalculate the Average Absolute Correlation"
  },
  {
    "objectID": "reference/criteria.AvgAbsCor.html#parameters",
    "href": "reference/criteria.AvgAbsCor.html#parameters",
    "title": "criteria.AvgAbsCor",
    "section": "Parameters",
    "text": "Parameters\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnpt.ArrayLike\nA numpy ndarray\nrequired"
  },
  {
    "objectID": "reference/criteria.AvgAbsCor.html#returns",
    "href": "reference/criteria.AvgAbsCor.html#returns",
    "title": "criteria.AvgAbsCor",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nfloat\nA positive number indicating the average absolute correlation\n\n\nfloat\nof input matrix"
  },
  {
    "objectID": "reference/criteria.AvgAbsCor.html#examples",
    "href": "reference/criteria.AvgAbsCor.html#examples",
    "title": "criteria.AvgAbsCor",
    "section": "Examples",
    "text": "Examples\nCalculate the average absolute correlation of random_lhd\n\nimport pyLHD\nrandom_lhd = pyLHD.LatinHypercube(size = (10,3))\npyLHD.AvgAbsCor(random_lhd)\n\n0.1313131313131313"
  },
  {
    "objectID": "reference/criteria.coverage.html",
    "href": "reference/criteria.coverage.html",
    "title": "criteria.coverage",
    "section": "",
    "text": "criteria.coverage(arr)\nCompute the coverage measure for a design"
  },
  {
    "objectID": "reference/criteria.coverage.html#parameters",
    "href": "reference/criteria.coverage.html#parameters",
    "title": "criteria.coverage",
    "section": "Parameters",
    "text": "Parameters\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnpt.ArrayLike\nA numpy ndarray\nrequired"
  },
  {
    "objectID": "reference/criteria.coverage.html#raises",
    "href": "reference/criteria.coverage.html#raises",
    "title": "criteria.coverage",
    "section": "Raises",
    "text": "Raises\n\n\n\nType\nDescription\n\n\n\n\nValueError\nWhenever number of rows is less than number of columns"
  },
  {
    "objectID": "reference/criteria.coverage.html#returns",
    "href": "reference/criteria.coverage.html#returns",
    "title": "criteria.coverage",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nfloat\nCoverage measure"
  },
  {
    "objectID": "reference/criteria.coverage.html#examples",
    "href": "reference/criteria.coverage.html#examples",
    "title": "criteria.coverage",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\nrandom_lhd = pyLHD.LatinHypercube(size = (5,5))\npyLHD.coverage(random_lhd)\n\n0.14428203313504573"
  },
  {
    "objectID": "reference/orthogonal.OLHD_Butler01.html",
    "href": "reference/orthogonal.OLHD_Butler01.html",
    "title": "orthogonal.OLHD_Butler01",
    "section": "",
    "text": "orthogonal.OLHD_Butler01(size, seed=None)\nOrthogonal Latin Hypercube Design (OLHD). Based on the construction method of Butler (2001)"
  },
  {
    "objectID": "reference/orthogonal.OLHD_Butler01.html#parameters",
    "href": "reference/orthogonal.OLHD_Butler01.html#parameters",
    "title": "orthogonal.OLHD_Butler01",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsize\ntuple of ints\nOutput shape of (n,d), where n and d are the number of rows and columns, respectively.\nrequired\n\n\nseed\nOptional[Union[int, np.random.Generator]])\nIf seedis an integer or None, a new numpy.random.Generator is created using np.random.default_rng(seed). If seed is already a `Generator instance, then the provided instance is used. Defaults to None.\nNone"
  },
  {
    "objectID": "reference/orthogonal.OLHD_Butler01.html#raises",
    "href": "reference/orthogonal.OLHD_Butler01.html#raises",
    "title": "orthogonal.OLHD_Butler01",
    "section": "Raises",
    "text": "Raises\n\n\n\nType\nDescription\n\n\n\n\nValueError\nIf d is not less than or equal to n\n\n\nValueError\nIf n is not greater than or equal to 3\n\n\nValueError\nIf n is not an odd prime number"
  },
  {
    "objectID": "reference/orthogonal.OLHD_Butler01.html#returns",
    "href": "reference/orthogonal.OLHD_Butler01.html#returns",
    "title": "orthogonal.OLHD_Butler01",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nA (n x d) orthogonal LHD"
  },
  {
    "objectID": "reference/orthogonal.OLHD_Butler01.html#examples",
    "href": "reference/orthogonal.OLHD_Butler01.html#examples",
    "title": "orthogonal.OLHD_Butler01",
    "section": "Examples",
    "text": "Examples\nCreate an orthogonal LHD with 11 rows and 5 columns\n\nimport pyLHD\npyLHD.OLHD_Butler01(size = (11,5))\n\narray([[ 2.,  3.,  5.,  1.,  4.],\n       [ 3., 11.,  8.,  7.,  2.],\n       [ 7.,  4.,  3., 10.,  1.],\n       [11.,  5., 10.,  4.,  3.],\n       [ 8., 10.,  1.,  3.,  5.],\n       [ 4.,  2., 11.,  9.,  7.],\n       [ 1.,  7.,  2.,  8.,  9.],\n       [ 5.,  8.,  9.,  2., 11.],\n       [ 9.,  1.,  4.,  5., 10.],\n       [10.,  9.,  7., 11.,  8.],\n       [ 6.,  6.,  6.,  6.,  6.]])\n\n\nCreate an orthogonal LHD with 7 rows and 6 columns\n\n pyLHD.OLHD_Butler01(size = (7,6))\n\narray([[2., 1., 3., 7., 3., 5.],\n       [1., 5., 6., 2., 5., 6.],\n       [3., 6., 1., 5., 7., 2.],\n       [5., 2., 7., 4., 6., 3.],\n       [7., 3., 2., 3., 4., 7.],\n       [6., 7., 5., 6., 2., 4.],\n       [4., 4., 4., 1., 1., 1.]])"
  },
  {
    "objectID": "reference/criteria.UniformProCriterion.html",
    "href": "reference/criteria.UniformProCriterion.html",
    "title": "criteria.UniformProCriterion",
    "section": "",
    "text": "criteria.UniformProCriterion(arr)\nCalculate the Uniform Projection Criterion\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnpt.ArrayLike\nA numpy ndarray\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nfloat\nUniform projection criteria"
  },
  {
    "objectID": "reference/criteria.UniformProCriterion.html#parameters",
    "href": "reference/criteria.UniformProCriterion.html#parameters",
    "title": "criteria.UniformProCriterion",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\narr\nnpt.ArrayLike\nA numpy ndarray\nrequired"
  },
  {
    "objectID": "reference/criteria.UniformProCriterion.html#returns",
    "href": "reference/criteria.UniformProCriterion.html#returns",
    "title": "criteria.UniformProCriterion",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nfloat\nUniform projection criteria"
  },
  {
    "objectID": "reference/orthogonal.OLHD_Ye98.html",
    "href": "reference/orthogonal.OLHD_Ye98.html",
    "title": "orthogonal.OLHD_Ye98",
    "section": "",
    "text": "orthogonal.OLHD_Ye98(m, seed=None)\nOrthogonal Latin Hyercube Design. Based on the construction method of Ye (1998)"
  },
  {
    "objectID": "reference/orthogonal.OLHD_Ye98.html#parameters",
    "href": "reference/orthogonal.OLHD_Ye98.html#parameters",
    "title": "orthogonal.OLHD_Ye98",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm\nint\nA positive integer, and it must be greater than or equal to 2\nrequired\n\n\nseed\nOptional[Union[int, np.random.Generator]])\nIf seedis an integer or None, a new numpy.random.Generator is created using np.random.default_rng(seed). If seed is already a `Generator instance, then the provided instance is used. Defaults to None.\nNone"
  },
  {
    "objectID": "reference/orthogonal.OLHD_Ye98.html#raises",
    "href": "reference/orthogonal.OLHD_Ye98.html#raises",
    "title": "orthogonal.OLHD_Ye98",
    "section": "Raises",
    "text": "Raises\n\n\n\nType\nDescription\n\n\n\n\nValueError\nIf m is not greater than or equal to 2"
  },
  {
    "objectID": "reference/orthogonal.OLHD_Ye98.html#returns",
    "href": "reference/orthogonal.OLHD_Ye98.html#returns",
    "title": "orthogonal.OLHD_Ye98",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nAn orthogonal LHD with the following run size: (n=2^m + 1) and factor size: (k=2m-2)"
  },
  {
    "objectID": "reference/orthogonal.OLHD_Ye98.html#examples",
    "href": "reference/orthogonal.OLHD_Ye98.html#examples",
    "title": "orthogonal.OLHD_Ye98",
    "section": "Examples",
    "text": "Examples\nCreate an orthogonal LHD with m=4. So n=2^m+1=9 runs and k=2*m-2=4 factors\n\nimport pyLHD\npyLHD.OLHD_Ye98(m=3)\n\narray([[ 1., -4., -2.,  3.],\n       [ 4.,  1., -3., -2.],\n       [ 3., -2.,  4., -1.],\n       [ 2.,  3.,  1.,  4.],\n       [ 0.,  0.,  0.,  0.],\n       [-1.,  4.,  2., -3.],\n       [-4., -1.,  3.,  2.],\n       [-3.,  2., -4.,  1.],\n       [-2., -3., -1., -4.]])\n\n\nCreate an orthogonal LHD with m=5. So n=2^m+1=17 runs and k=2*m-2=6 factors\n\npyLHD.OLHD_Ye98(m=4)\n\narray([[ 1., -2., -6., -8.,  3.,  5.],\n       [ 2.,  1., -4., -3., -8., -7.],\n       [ 4., -6.,  2., -7., -5.,  3.],\n       [ 6.,  4.,  1., -5.,  7., -8.],\n       [ 5., -7., -8.,  6.,  4., -1.],\n       [ 7.,  5., -3.,  4., -6.,  2.],\n       [ 3., -8.,  7.,  2., -1., -4.],\n       [ 8.,  3.,  5.,  1.,  2.,  6.],\n       [ 0.,  0.,  0.,  0.,  0.,  0.],\n       [-1.,  2.,  6.,  8., -3., -5.],\n       [-2., -1.,  4.,  3.,  8.,  7.],\n       [-4.,  6., -2.,  7.,  5., -3.],\n       [-6., -4., -1.,  5., -7.,  8.],\n       [-5.,  7.,  8., -6., -4.,  1.],\n       [-7., -5.,  3., -4.,  6., -2.],\n       [-3.,  8., -7., -2.,  1.,  4.],\n       [-8., -3., -5., -1., -2., -6.]])"
  },
  {
    "objectID": "reference/helpers.are_coprime.html",
    "href": "reference/helpers.are_coprime.html",
    "title": "helpers.are_coprime",
    "section": "",
    "text": "helpers.are_coprime(a, b)\nCheck if two integers are coprime"
  },
  {
    "objectID": "reference/helpers.are_coprime.html#parameters",
    "href": "reference/helpers.are_coprime.html#parameters",
    "title": "helpers.are_coprime",
    "section": "Parameters",
    "text": "Parameters\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\na\nint\nAn integer\nrequired\n\n\nb\nint\nAn integer\nrequired"
  },
  {
    "objectID": "reference/helpers.are_coprime.html#returns",
    "href": "reference/helpers.are_coprime.html#returns",
    "title": "helpers.are_coprime",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nbool\nReturns True if two integers are coprime"
  },
  {
    "objectID": "reference/helpers.are_coprime.html#examples",
    "href": "reference/helpers.are_coprime.html#examples",
    "title": "helpers.are_coprime",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\npyLHD.are_coprime(2,12)\n\nFalse\n\n\n\npyLHD.are_coprime(3,11)\n\nTrue"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "Generate Random LHD\n\n\n\nbase.LatinSquare\nGenerate a random (n x d) Latin square\n\n\nbase.LatinHypercube\nGenerate a random Latin Hypercube Design\n\n\nbase.GoodLatticePoint\nGood Lattice Point (GLP) Design\n\n\n\n\n\n\nVarious constructions of orthogonal latin hypercube designs\n\n\n\northogonal.OLHD_Butler01\nOrthogonal Latin Hypercube Design (OLHD). Based on the construction method of Butler (2001)\n\n\northogonal.OLHD_Cioppa07\nOrthogonal Latin Hyercube Design. Based on the construction method of Cioppa and Lucas (2007)\n\n\northogonal.OLHD_Lin09\nOrthogonal Latin Hypercube Design. Based on the construction method of Lin et al. (2009)\n\n\northogonal.OLHD_Sun10\nOrthogonal Latin Hypercube Design (OLHD). Based on the construction method of Sun et al. (2010)\n\n\northogonal.OLHD_Ye98\nOrthogonal Latin Hyercube Design. Based on the construction method of Ye (1998)\n\n\northogonal.OA2LHD\nTransform an Orthogonal Array (OA) into an LHD\n\n\n\n\n\n\nSpace-filling Criterias for LHD\n\n\n\ncriteria.Criteria\nA class representing a collection of criteria functions.\n\n\ncriteria.AvgAbsCor\nCalculate the Average Absolute Correlation\n\n\ncriteria.coverage\nCompute the coverage measure for a design\n\n\ncriteria.discrepancy\nDiscrepancy of a given sample\n\n\ncriteria.InterSite\nCalculate the Inter-site Distance between the ith and jth index\n\n\ncriteria.pairwise_InterSite\nCalculate the Inter-site Distance between all pairwise (rows/columns)\n\n\ncriteria.LqDistance\nCalculate the Lq-Distance of a Latin Hypercube Design\n\n\ncriteria.MaxAbsCor\nCalculate the Maximum Absolute Correlation\n\n\ncriteria.maximin\nCompute the maximin criterion for a given design. A higher value corresponds to a more regular scattering of design points.\n\n\ncriteria.MeshRatio\nCompute the meshratio criterion for a given design\n\n\ncriteria.MaxProCriterion\nCalculate the Maximum Projection Criterion\n\n\ncriteria.phi_p\nCalculate the phi_p Criterion\n\n\ncriteria.UniformProCriterion\nCalculate the Uniform Projection Criterion\n\n\n\n\n\n\nmiscellaneous utilities for working with LHDs\n\n\n\nhelpers.are_coprime\nCheck if two integers are coprime\n\n\nhelpers.check_bounds\nCheck conditions for bounds input\n\n\nhelpers.column_combinations\nGenerates all unique combinations of columns from the given array, selecting ‘k’ columns at a time.\n\n\nhelpers.distance_matrix\nDistance matrix based on specified distance measure\n\n\nhelpers.euler_phi\nEuler’s Totient function\n\n\nhelpers.is_LHD\nVerify Latinhypercube sampling conditions\n\n\nhelpers.is_balanced_design\nVerify a design is balanced\n\n\nhelpers.lapply\nApply a function to each item in a list\n\n\nhelpers.LinearPermutation\nApply a linear permutation to a Good lattice point (GLP) design\n\n\nhelpers.permute_columns\nRandomly permute columns in a numpy ndarray\n\n\nhelpers.permute_rows\nRandomly permute rows in a numpy ndarray\n\n\nhelpers.replace_values\nReplace values in a numpy array based on a provided mapping dictionary\n\n\nhelpers.scale\nSample scaling from unit hypercube to different bounds\n\n\nhelpers.swap_elements\nSwap two random elements in a matrix\n\n\nhelpers.totatives\nGenerate all positive integers less than and coprime to N from [1,N)\n\n\nhelpers.williams_transform\nWilliams Transformation"
  },
  {
    "objectID": "reference/index.html#base-designs",
    "href": "reference/index.html#base-designs",
    "title": "Function reference",
    "section": "",
    "text": "Generate Random LHD\n\n\n\nbase.LatinSquare\nGenerate a random (n x d) Latin square\n\n\nbase.LatinHypercube\nGenerate a random Latin Hypercube Design\n\n\nbase.GoodLatticePoint\nGood Lattice Point (GLP) Design"
  },
  {
    "objectID": "reference/index.html#orthogonal-lhd",
    "href": "reference/index.html#orthogonal-lhd",
    "title": "Function reference",
    "section": "",
    "text": "Various constructions of orthogonal latin hypercube designs\n\n\n\northogonal.OLHD_Butler01\nOrthogonal Latin Hypercube Design (OLHD). Based on the construction method of Butler (2001)\n\n\northogonal.OLHD_Cioppa07\nOrthogonal Latin Hyercube Design. Based on the construction method of Cioppa and Lucas (2007)\n\n\northogonal.OLHD_Lin09\nOrthogonal Latin Hypercube Design. Based on the construction method of Lin et al. (2009)\n\n\northogonal.OLHD_Sun10\nOrthogonal Latin Hypercube Design (OLHD). Based on the construction method of Sun et al. (2010)\n\n\northogonal.OLHD_Ye98\nOrthogonal Latin Hyercube Design. Based on the construction method of Ye (1998)\n\n\northogonal.OA2LHD\nTransform an Orthogonal Array (OA) into an LHD"
  },
  {
    "objectID": "reference/index.html#criteria",
    "href": "reference/index.html#criteria",
    "title": "Function reference",
    "section": "",
    "text": "Space-filling Criterias for LHD\n\n\n\ncriteria.Criteria\nA class representing a collection of criteria functions.\n\n\ncriteria.AvgAbsCor\nCalculate the Average Absolute Correlation\n\n\ncriteria.coverage\nCompute the coverage measure for a design\n\n\ncriteria.discrepancy\nDiscrepancy of a given sample\n\n\ncriteria.InterSite\nCalculate the Inter-site Distance between the ith and jth index\n\n\ncriteria.pairwise_InterSite\nCalculate the Inter-site Distance between all pairwise (rows/columns)\n\n\ncriteria.LqDistance\nCalculate the Lq-Distance of a Latin Hypercube Design\n\n\ncriteria.MaxAbsCor\nCalculate the Maximum Absolute Correlation\n\n\ncriteria.maximin\nCompute the maximin criterion for a given design. A higher value corresponds to a more regular scattering of design points.\n\n\ncriteria.MeshRatio\nCompute the meshratio criterion for a given design\n\n\ncriteria.MaxProCriterion\nCalculate the Maximum Projection Criterion\n\n\ncriteria.phi_p\nCalculate the phi_p Criterion\n\n\ncriteria.UniformProCriterion\nCalculate the Uniform Projection Criterion"
  },
  {
    "objectID": "reference/index.html#helpers",
    "href": "reference/index.html#helpers",
    "title": "Function reference",
    "section": "",
    "text": "miscellaneous utilities for working with LHDs\n\n\n\nhelpers.are_coprime\nCheck if two integers are coprime\n\n\nhelpers.check_bounds\nCheck conditions for bounds input\n\n\nhelpers.column_combinations\nGenerates all unique combinations of columns from the given array, selecting ‘k’ columns at a time.\n\n\nhelpers.distance_matrix\nDistance matrix based on specified distance measure\n\n\nhelpers.euler_phi\nEuler’s Totient function\n\n\nhelpers.is_LHD\nVerify Latinhypercube sampling conditions\n\n\nhelpers.is_balanced_design\nVerify a design is balanced\n\n\nhelpers.lapply\nApply a function to each item in a list\n\n\nhelpers.LinearPermutation\nApply a linear permutation to a Good lattice point (GLP) design\n\n\nhelpers.permute_columns\nRandomly permute columns in a numpy ndarray\n\n\nhelpers.permute_rows\nRandomly permute rows in a numpy ndarray\n\n\nhelpers.replace_values\nReplace values in a numpy array based on a provided mapping dictionary\n\n\nhelpers.scale\nSample scaling from unit hypercube to different bounds\n\n\nhelpers.swap_elements\nSwap two random elements in a matrix\n\n\nhelpers.totatives\nGenerate all positive integers less than and coprime to N from [1,N)\n\n\nhelpers.williams_transform\nWilliams Transformation"
  },
  {
    "objectID": "reference/base.LatinHypercube.html",
    "href": "reference/base.LatinHypercube.html",
    "title": "base.LatinHypercube",
    "section": "",
    "text": "base.LatinHypercube(size, scramble=True, seed=None)\nGenerate a random Latin Hypercube Design"
  },
  {
    "objectID": "reference/base.LatinHypercube.html#parameters",
    "href": "reference/base.LatinHypercube.html#parameters",
    "title": "base.LatinHypercube",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsize\ntuple of ints\nOutput shape of (n,d), where n and d are the number of rows and columns, respectively.\nrequired\n\n\nscramble\nOptional[bool]\nWhen False, center samples within cells of a multi-dimensional grid. Otherwise, samples are randomly placed within cells of the grid. Defaults to True.\nTrue\n\n\nseed\nOptional[Union[int, np.random.Generator]])\nIf seedis an integer or None, a new numpy.random.Generator is created using np.random.default_rng(seed). If seed is already a `Generator instance, then the provided instance is used. Defaults to None.\nNone"
  },
  {
    "objectID": "reference/base.LatinHypercube.html#returns",
    "href": "reference/base.LatinHypercube.html#returns",
    "title": "base.LatinHypercube",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nA Latin hypercube sample of \\(n\\) points generated in \\([0,1)^d\\) Each univariate marginal distribution is stratisfied, placing exactly one point in \\([j/n,(j+1)/n)\\) for \\(j=0,1,\\dots,n-1\\)"
  },
  {
    "objectID": "reference/base.LatinHypercube.html#examples",
    "href": "reference/base.LatinHypercube.html#examples",
    "title": "base.LatinHypercube",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\npyLHD.LatinHypercube(size = (5,3),seed = 1)\n\narray([[0.70930042, 0.30930042, 0.10930042],\n       [0.90930042, 0.50930042, 0.90930042],\n       [0.10930042, 0.70930042, 0.30930042],\n       [0.50930042, 0.90930042, 0.70930042],\n       [0.30930042, 0.10930042, 0.50930042]])\n\n\n\npyLHD.LatinHypercube(size = (5,3), seed = 1, scramble = False)\n\narray([[0.7, 0.3, 0.1],\n       [0.9, 0.5, 0.9],\n       [0.1, 0.7, 0.3],\n       [0.5, 0.9, 0.7],\n       [0.3, 0.1, 0.5]])"
  },
  {
    "objectID": "reference/criteria.LqDistance.html",
    "href": "reference/criteria.LqDistance.html",
    "title": "criteria.LqDistance",
    "section": "",
    "text": "criteria.LqDistance(arr, q=1)\nCalculate the Lq-Distance of a Latin Hypercube Design"
  },
  {
    "objectID": "reference/criteria.LqDistance.html#parameters",
    "href": "reference/criteria.LqDistance.html#parameters",
    "title": "criteria.LqDistance",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnpt.ArrayLike\nA numpy ndarray\nrequired\n\n\nq\nint\nIf (q) is 1, (inter_site) is the Manhattan (rectangular) distance. If (q) is 2, (inter_site) is the Euclidean distance. Default is q=1.\n1"
  },
  {
    "objectID": "reference/criteria.LqDistance.html#returns",
    "href": "reference/criteria.LqDistance.html#returns",
    "title": "criteria.LqDistance",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nfloat\nThe \\(L_q\\) distance of a LHD. Defined as \\(d = min \\{ InterSite(arr(i,j)) : i \\neq j, \\, i,j = 1,2,...,n \\}\\) The maximin \\(L_q\\)-distance design is defined as the one which maximizes \\(d\\)"
  },
  {
    "objectID": "reference/criteria.LqDistance.html#examples",
    "href": "reference/criteria.LqDistance.html#examples",
    "title": "criteria.LqDistance",
    "section": "Examples",
    "text": "Examples\nCalculate the \\(L_1\\) distance of random_lhd with q=1 (rectangular)\n\nimport pyLHD\nrandom_lhd = pyLHD.LatinHypercube(size = (10,3))\npyLHD.LqDistance(random_lhd)\n\n0.4000000000000001\n\n\nCalculate the \\(L_2\\) distance of random_lhd with q=2 (Euclidean)\n\npyLHD.LqDistance(random_lhd, q = 2)\n\n0.24494897427831783"
  },
  {
    "objectID": "reference/orthogonal.OA2LHD.html",
    "href": "reference/orthogonal.OA2LHD.html",
    "title": "orthogonal.OA2LHD",
    "section": "",
    "text": "orthogonal.OA2LHD(arr, seed=None)\nTransform an Orthogonal Array (OA) into an LHD"
  },
  {
    "objectID": "reference/orthogonal.OA2LHD.html#parameters",
    "href": "reference/orthogonal.OA2LHD.html#parameters",
    "title": "orthogonal.OA2LHD",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnumpy.ndarray\nAn orthogonal array matrix\nrequired\n\n\nseed\nOptional[Union[int, np.random.Generator]])\nIf seedis an integer or None, a new numpy.random.Generator is created using np.random.default_rng(seed). If seed is already a `Generator instance, then the provided instance is used. Defaults to None.\nNone"
  },
  {
    "objectID": "reference/orthogonal.OA2LHD.html#returns",
    "href": "reference/orthogonal.OA2LHD.html#returns",
    "title": "orthogonal.OA2LHD",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nLHD whose sizes are the same as input OA. The assumption is that the elements of OAs must be positive"
  },
  {
    "objectID": "reference/orthogonal.OA2LHD.html#examples",
    "href": "reference/orthogonal.OA2LHD.html#examples",
    "title": "orthogonal.OA2LHD",
    "section": "Examples",
    "text": "Examples\nFirst create an OA(9,2,3,2)\n\nimport numpy as np\nexample_OA = np.array([[1,1],[1,2],[1,3],[2,1],\n                       [2,2],[2,3],[3,1],[3,2],[3,3] ])\n\nTransform the “OA” above into a LHD according to Tang (1993)\n\nimport pyLHD\npyLHD.OA2LHD(example_OA)      \n\narray([[1, 3],\n       [3, 6],\n       [2, 8],\n       [6, 2],\n       [5, 4],\n       [4, 7],\n       [8, 1],\n       [9, 5],\n       [7, 9]])"
  },
  {
    "objectID": "reference/helpers.permute_rows.html",
    "href": "reference/helpers.permute_rows.html",
    "title": "helpers.permute_rows",
    "section": "",
    "text": "helpers.permute_rows(arr, rows=None, seed=None)\nRandomly permute rows in a numpy ndarray"
  },
  {
    "objectID": "reference/helpers.permute_rows.html#parameters",
    "href": "reference/helpers.permute_rows.html#parameters",
    "title": "helpers.permute_rows",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnpt.ArrayLike\nA numpy ndarray\nrequired\n\n\nrows\nOptional[List[int]]\nIf rows is None all columns will be randomly permuted, otherwise provide a list of rows to permute. Defaults to None.\nNone\n\n\nseed\nOptional[Union[int, np.random.Generator]])\nIf seedis an integer or None, a new numpy.random.Generator is created using np.random.default_rng(seed). If seed is already a `Generator instance, then the provided instance is used. Defaults to None.\nNone"
  },
  {
    "objectID": "reference/helpers.permute_rows.html#returns",
    "href": "reference/helpers.permute_rows.html#returns",
    "title": "helpers.permute_rows",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nnumpy ndarray with rows of choice randomly permuted"
  },
  {
    "objectID": "reference/helpers.permute_rows.html#examples",
    "href": "reference/helpers.permute_rows.html#examples",
    "title": "helpers.permute_rows",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\nx = pyLHD.LatinHypercube(size = (5,3), seed = 1)\nx\n\narray([[0.70930042, 0.30930042, 0.10930042],\n       [0.90930042, 0.50930042, 0.90930042],\n       [0.10930042, 0.70930042, 0.30930042],\n       [0.50930042, 0.90930042, 0.70930042],\n       [0.30930042, 0.10930042, 0.50930042]])\n\n\nPermute all columns\n\npyLHD.permute_rows(x)\n\narray([[0.10930042, 0.30930042, 0.70930042],\n       [0.90930042, 0.50930042, 0.90930042],\n       [0.30930042, 0.10930042, 0.70930042],\n       [0.70930042, 0.90930042, 0.50930042],\n       [0.50930042, 0.30930042, 0.10930042]])\n\n\nPermute columns [0,1] with seed=1\n\npyLHD.permute_rows(x, rows = [0,1], seed = 1)\n\narray([[0.70930042, 0.30930042, 0.10930042],\n       [0.90930042, 0.90930042, 0.50930042],\n       [0.10930042, 0.70930042, 0.30930042],\n       [0.50930042, 0.90930042, 0.70930042],\n       [0.30930042, 0.10930042, 0.50930042]])"
  },
  {
    "objectID": "reference/criteria.maximin.html",
    "href": "reference/criteria.maximin.html",
    "title": "criteria.maximin",
    "section": "",
    "text": "criteria.maximin(arr)\nCompute the maximin criterion for a given design. A higher value corresponds to a more regular scattering of design points."
  },
  {
    "objectID": "reference/criteria.maximin.html#parameters",
    "href": "reference/criteria.maximin.html#parameters",
    "title": "criteria.maximin",
    "section": "Parameters",
    "text": "Parameters\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnpt.ArrayLike\nA numpy ndarray\nrequired"
  },
  {
    "objectID": "reference/criteria.maximin.html#returns",
    "href": "reference/criteria.maximin.html#returns",
    "title": "criteria.maximin",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nfloat\nCalculated maximin criterion"
  },
  {
    "objectID": "reference/criteria.maximin.html#examples",
    "href": "reference/criteria.maximin.html#examples",
    "title": "criteria.maximin",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\nrandom_lhd = pyLHD.LatinHypercube(size = (10,3))\npyLHD.maximin(random_lhd)\n\n0.29999999999999993"
  },
  {
    "objectID": "reference/criteria.MeshRatio.html",
    "href": "reference/criteria.MeshRatio.html",
    "title": "criteria.MeshRatio",
    "section": "",
    "text": "criteria.MeshRatio(arr)\nCompute the meshratio criterion for a given design"
  },
  {
    "objectID": "reference/criteria.MeshRatio.html#parameters",
    "href": "reference/criteria.MeshRatio.html#parameters",
    "title": "criteria.MeshRatio",
    "section": "Parameters",
    "text": "Parameters\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnpt.ArrayLike\nA numpy ndarray\nrequired"
  },
  {
    "objectID": "reference/criteria.MeshRatio.html#raises",
    "href": "reference/criteria.MeshRatio.html#raises",
    "title": "criteria.MeshRatio",
    "section": "Raises",
    "text": "Raises\n\n\n\nType\nDescription\n\n\n\n\nValueError\nWhenever number of rows is less than number of columns"
  },
  {
    "objectID": "reference/criteria.MeshRatio.html#returns",
    "href": "reference/criteria.MeshRatio.html#returns",
    "title": "criteria.MeshRatio",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nfloat\nCalculated meshratio"
  },
  {
    "objectID": "reference/criteria.MeshRatio.html#examples",
    "href": "reference/criteria.MeshRatio.html#examples",
    "title": "criteria.MeshRatio",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\nrandom_lhd = pyLHD.LatinHypercube(size = (5,5))\npyLHD.MeshRatio(random_lhd)\n\n1.2060453783110543"
  },
  {
    "objectID": "reference/criteria.discrepancy.html",
    "href": "reference/criteria.discrepancy.html",
    "title": "criteria.discrepancy",
    "section": "",
    "text": "criteria.discrepancy(arr, method='centered_L2')\nDiscrepancy of a given sample"
  },
  {
    "objectID": "reference/criteria.discrepancy.html#parameters",
    "href": "reference/criteria.discrepancy.html#parameters",
    "title": "criteria.discrepancy",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnpt.ArrayLike\nA numpy ndarray\nrequired\n\n\nmethod\nstr\nType of discrepancy. Defaults to ‘centered_L2’. Options include: ‘L2’, ‘L2_star’,‘centered_L2’, ‘modified_L2’, ‘mixture_L2’, ‘symmetric_L2’, ‘wrap_around_L2’\n'centered_L2'"
  },
  {
    "objectID": "reference/criteria.discrepancy.html#raises",
    "href": "reference/criteria.discrepancy.html#raises",
    "title": "criteria.discrepancy",
    "section": "Raises",
    "text": "Raises\n\n\n\nType\nDescription\n\n\n\n\nValueError\nWhenever number of rows is less than number of columns"
  },
  {
    "objectID": "reference/criteria.discrepancy.html#returns",
    "href": "reference/criteria.discrepancy.html#returns",
    "title": "criteria.discrepancy",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nfloat\nDesired discrepancy type"
  },
  {
    "objectID": "reference/criteria.discrepancy.html#examples",
    "href": "reference/criteria.discrepancy.html#examples",
    "title": "criteria.discrepancy",
    "section": "Examples",
    "text": "Examples\nCalculate the centered_L2 discrepancy of random_lhd\n\nimport pyLHD\nrandom_lhd = pyLHD.LatinHypercube(size = (10,3))\npyLHD.discrepancy(random_lhd)\n\n0.11154605887994463\n\n\nCalculate the L2 star discrepancy of random_lhd\n\npyLHD.discrepancy(random_lhd,method='L2_star')\n\n0.058850921312612436"
  },
  {
    "objectID": "reference/helpers.replace_values.html",
    "href": "reference/helpers.replace_values.html",
    "title": "helpers.replace_values",
    "section": "",
    "text": "helpers.replace_values(arr, mapping)\nReplace values in a numpy array based on a provided mapping dictionary"
  },
  {
    "objectID": "reference/helpers.replace_values.html#parameters",
    "href": "reference/helpers.replace_values.html#parameters",
    "title": "helpers.replace_values",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnpt.ArrayLike\nA numpy array with values to be replaced.\nrequired\n\n\nmapping\ndict\nA dictionary where keys correspond to values in arr and values are the replacement values.\nrequired"
  },
  {
    "objectID": "reference/helpers.replace_values.html#returns",
    "href": "reference/helpers.replace_values.html#returns",
    "title": "helpers.replace_values",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nA numpy array with replaced values."
  },
  {
    "objectID": "reference/helpers.replace_values.html#raises",
    "href": "reference/helpers.replace_values.html#raises",
    "title": "helpers.replace_values",
    "section": "Raises",
    "text": "Raises\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nValueError\nIf mapping does not contain the same unique values as in arr, or if the keys do not match."
  },
  {
    "objectID": "reference/helpers.replace_values.html#examples",
    "href": "reference/helpers.replace_values.html#examples",
    "title": "helpers.replace_values",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\nrandom_ls = pyLHD.LatinSquare(size = (4,3))\nrandom_ls\n\narray([[3, 4, 4],\n       [2, 1, 2],\n       [1, 3, 1],\n       [4, 2, 3]])\n\n\nConsider the mapping \\(1 \\rightarrow 2, 2 \\rightarrow 11, 3 \\rightarrow 12, 4 \\rightarrow 13\\)\n\nmapping = {1:10, 2:11, 3:12, 4:13}\npyLHD.replace_values(random_ls, mapping = mapping)\n\narray([[12, 13, 13],\n       [11, 10, 11],\n       [10, 12, 10],\n       [13, 11, 12]])"
  },
  {
    "objectID": "reference/criteria.InterSite.html",
    "href": "reference/criteria.InterSite.html",
    "title": "criteria.InterSite",
    "section": "",
    "text": "criteria.InterSite(arr, i, j, q=1, axis=0)\nCalculate the Inter-site Distance between the ith and jth index"
  },
  {
    "objectID": "reference/criteria.InterSite.html#parameters",
    "href": "reference/criteria.InterSite.html#parameters",
    "title": "criteria.InterSite",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnpt.ArrayLike\nA numpy ndarray\nrequired\n\n\ni\nint\nA positive integer, which stands for the ith row of (arr)\nrequired\n\n\nj\nint\nA positive integer, which stands for the jth row of (arr)\nrequired\n\n\nq\nint\nThe default is set to be 1, and it could be either 1 or 2. If (q) is 1, (inter_site) is the Manhattan (rectangular) distance. If (q) is 2, (inter_site) is the Euclidean distance.\n1\n\n\naxis\nint\nThe default is set to be 0, and it coult be either 1 or 0. If (axis) is 0 compute Inter-site distance row-wise otherwise columnwise.\n0"
  },
  {
    "objectID": "reference/criteria.InterSite.html#returns",
    "href": "reference/criteria.InterSite.html#returns",
    "title": "criteria.InterSite",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nfloat\npositive number indicating the distance (rectangular or Euclidean) between the ith and jth row of arr"
  },
  {
    "objectID": "reference/criteria.InterSite.html#examples",
    "href": "reference/criteria.InterSite.html#examples",
    "title": "criteria.InterSite",
    "section": "Examples",
    "text": "Examples\nCalculate the inter-site distance of the 0th and 2nd index of random_lhd (row-wise)\n\nimport pyLHD\nrandom_lhd = pyLHD.LatinHypercube(size = (10,3))\npyLHD.InterSite(random_lhd,i=0,j=2)\n\n0.7999999999999999\n\n\nCalculate the inter-site distance of the 0th and 2nd index of random_lhd (column-wise)\n\npyLHD.InterSite(random_lhd,i=0,j=2, axis = 1)\n\n4.6"
  },
  {
    "objectID": "reference/helpers.williams_transform.html",
    "href": "reference/helpers.williams_transform.html",
    "title": "helpers.williams_transform",
    "section": "",
    "text": "helpers.williams_transform(arr, baseline=0)\nWilliams Transformation"
  },
  {
    "objectID": "reference/helpers.williams_transform.html#parameters",
    "href": "reference/helpers.williams_transform.html#parameters",
    "title": "helpers.williams_transform",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnpt.ArrayLike\nA numpy ndarray\nrequired\n\n\nbaseline\nint\nA integer, which defines the minimum value for each column of the matrix. Defaults to 0.\n0"
  },
  {
    "objectID": "reference/helpers.williams_transform.html#returns",
    "href": "reference/helpers.williams_transform.html#returns",
    "title": "helpers.williams_transform",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nAfter applying Williams transformation, a matrix whose columns are permutations from {baseline,baseline+1, …, baseline+(n-1)}"
  },
  {
    "objectID": "reference/helpers.williams_transform.html#examples",
    "href": "reference/helpers.williams_transform.html#examples",
    "title": "helpers.williams_transform",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\nrandom_ls = pyLHD.LatinSquare(size = (5,3))\nrandom_ls\n\narray([[3, 5, 4],\n       [5, 4, 5],\n       [1, 3, 1],\n       [2, 2, 3],\n       [4, 1, 2]])\n\n\nChange the baseline\n\npyLHD.williams_transform(random_ls,baseline=3)\n\narray([[7, 4, 6],\n       [4, 6, 4],\n       [3, 7, 3],\n       [5, 5, 7],\n       [6, 3, 5]])"
  },
  {
    "objectID": "reference/helpers.totatives.html",
    "href": "reference/helpers.totatives.html",
    "title": "helpers.totatives",
    "section": "",
    "text": "helpers.totatives(N)\nGenerate all positive integers less than and coprime to N from [1,N)"
  },
  {
    "objectID": "reference/helpers.totatives.html#parameters",
    "href": "reference/helpers.totatives.html#parameters",
    "title": "helpers.totatives",
    "section": "Parameters",
    "text": "Parameters\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nN\nint\nThe number to find coprimes for\nrequired"
  },
  {
    "objectID": "reference/helpers.totatives.html#returns",
    "href": "reference/helpers.totatives.html#returns",
    "title": "helpers.totatives",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nList[int]\nList[int]: A list of integers from [1,N) that are coprime to N"
  },
  {
    "objectID": "reference/helpers.totatives.html#examples",
    "href": "reference/helpers.totatives.html#examples",
    "title": "helpers.totatives",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\npyLHD.totatives(11)\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
  },
  {
    "objectID": "reference/base.GoodLatticePoint.html",
    "href": "reference/base.GoodLatticePoint.html",
    "title": "base.GoodLatticePoint",
    "section": "",
    "text": "base.GoodLatticePoint(size, h=None, seed=None)\nGood Lattice Point (GLP) Design"
  },
  {
    "objectID": "reference/base.GoodLatticePoint.html#parameters",
    "href": "reference/base.GoodLatticePoint.html#parameters",
    "title": "base.GoodLatticePoint",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsize\ntuple of ints\nOutput shape of (n,d), where n and d are the number of rows and columns, respectively\nrequired\n\n\nh\nlist of ints\nA generator vector used to multiply each row of the design. Each element in h must be smaller than and coprime to n\nNone\n\n\nseed\nOptional[Union[int, np.random.Generator]])\nIf seedis an integer or None, a new numpy.random.Generator is created using np.random.default_rng(seed). If seed is already a `Generator instance, then the provided instance is used. Defaults to None.\nNone"
  },
  {
    "objectID": "reference/base.GoodLatticePoint.html#returns",
    "href": "reference/base.GoodLatticePoint.html#returns",
    "title": "base.GoodLatticePoint",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nGenerated random (n x d) Good lattice point set, in which each column is a random permutation of {0,1,…,n-1}"
  },
  {
    "objectID": "reference/base.GoodLatticePoint.html#examples",
    "href": "reference/base.GoodLatticePoint.html#examples",
    "title": "base.GoodLatticePoint",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\npyLHD.GoodLatticePoint(size = (10,4))\n\narray([[1, 3, 7, 9],\n       [2, 6, 4, 8],\n       [3, 9, 1, 7],\n       [4, 2, 8, 6],\n       [5, 5, 5, 5],\n       [6, 8, 2, 4],\n       [7, 1, 9, 3],\n       [8, 4, 6, 2],\n       [9, 7, 3, 1],\n       [0, 0, 0, 0]])\n\n\n\npyLHD.GoodLatticePoint(size = (10,3),seed = 1)\n\narray([[3, 1, 9],\n       [6, 2, 8],\n       [9, 3, 7],\n       [2, 4, 6],\n       [5, 5, 5],\n       [8, 6, 4],\n       [1, 7, 3],\n       [4, 8, 2],\n       [7, 9, 1],\n       [0, 0, 0]])"
  },
  {
    "objectID": "reference/base.LatinSquare.html",
    "href": "reference/base.LatinSquare.html",
    "title": "base.LatinSquare",
    "section": "",
    "text": "base.LatinSquare(size, baseline=1, seed=None)\nGenerate a random (n x d) Latin square"
  },
  {
    "objectID": "reference/base.LatinSquare.html#parameters",
    "href": "reference/base.LatinSquare.html#parameters",
    "title": "base.LatinSquare",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsize\ntuple of ints\nOutput shape of (n,d), where n and d are the number of rows and columns, respectively.\nrequired\n\n\nbaseline\nint\nA integer, which defines the minimum value for each column of the matrix. Defaults to 1.\n1\n\n\nseed\nOptional[Union[int, np.random.Generator]])\nIf seedis an integer or None, a new numpy.random.Generator is created using np.random.default_rng(seed). If seed is already a `Generator instance, then the provided instance is used. Defaults to None.\nNone"
  },
  {
    "objectID": "reference/base.LatinSquare.html#returns",
    "href": "reference/base.LatinSquare.html#returns",
    "title": "base.LatinSquare",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nGenerated random (n x d) Latin square, in which each column is a random permutation of {baseline,baseline+1, …, baseline+(n-1)}"
  },
  {
    "objectID": "reference/base.LatinSquare.html#examples",
    "href": "reference/base.LatinSquare.html#examples",
    "title": "base.LatinSquare",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\npyLHD.LatinSquare(size = (5,3),seed = 1)\n\narray([[4, 2, 1],\n       [5, 3, 5],\n       [1, 4, 2],\n       [3, 5, 4],\n       [2, 1, 3]])"
  },
  {
    "objectID": "reference/helpers.swap_elements.html",
    "href": "reference/helpers.swap_elements.html",
    "title": "helpers.swap_elements",
    "section": "",
    "text": "helpers.swap_elements(arr, idx, type='col', seed=None)\nSwap two random elements in a matrix"
  },
  {
    "objectID": "reference/helpers.swap_elements.html#parameters",
    "href": "reference/helpers.swap_elements.html#parameters",
    "title": "helpers.swap_elements",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnpt.ArrayLike\nA numpy ndarray\nrequired\n\n\nidx\nint\nA positive integer, which stands for the (idx) column or row of (arr) type (str, optional): If type is ‘col’, two random elements will be exchanged within column (idx). If type is ‘row’, two random elements will be exchanged within row (idx). Defaults to ‘col’.\nrequired\n\n\nseed\nOptional[Union[int, np.random.Generator]])\nIf seedis an integer or None, a new numpy.random.Generator is created using np.random.default_rng(seed). If seed is already a `Generator instance, then the provided instance is used. Defaults to None.\nNone"
  },
  {
    "objectID": "reference/helpers.swap_elements.html#returns",
    "href": "reference/helpers.swap_elements.html#returns",
    "title": "helpers.swap_elements",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nA new design matrix after the swap of elements"
  },
  {
    "objectID": "reference/helpers.swap_elements.html#examples",
    "href": "reference/helpers.swap_elements.html#examples",
    "title": "helpers.swap_elements",
    "section": "Examples",
    "text": "Examples\nChoose the first columns of random_lhd and swap two randomly selected elements\n\nimport pyLHD\nrandom_lhd = pyLHD.LatinHypercube(size = (5,3))\nrandom_lhd\n\narray([[0.6878749, 0.8878749, 0.8878749],\n       [0.0878749, 0.4878749, 0.0878749],\n       [0.8878749, 0.6878749, 0.6878749],\n       [0.4878749, 0.0878749, 0.2878749],\n       [0.2878749, 0.2878749, 0.4878749]])\n\n\nChoose column 1 of random_lhd and swap two randomly selected elements\n\npyLHD.swap_elements(random_lhd,idx=1,type='col')\n\narray([[0.6878749, 0.4878749, 0.8878749],\n       [0.0878749, 0.8878749, 0.0878749],\n       [0.8878749, 0.6878749, 0.6878749],\n       [0.4878749, 0.0878749, 0.2878749],\n       [0.2878749, 0.2878749, 0.4878749]])\n\n\nChoose the first row of random_lhd and swap two randomly selected elements\n\npyLHD.swap_elements(random_lhd,idx=1,type='row')\n\narray([[0.6878749, 0.4878749, 0.8878749],\n       [0.0878749, 0.8878749, 0.0878749],\n       [0.8878749, 0.6878749, 0.6878749],\n       [0.4878749, 0.0878749, 0.2878749],\n       [0.2878749, 0.2878749, 0.4878749]])"
  },
  {
    "objectID": "reference/helpers.euler_phi.html",
    "href": "reference/helpers.euler_phi.html",
    "title": "helpers.euler_phi",
    "section": "",
    "text": "helpers.euler_phi(N)\nEuler’s Totient function"
  },
  {
    "objectID": "reference/helpers.euler_phi.html#parameters",
    "href": "reference/helpers.euler_phi.html#parameters",
    "title": "helpers.euler_phi",
    "section": "Parameters",
    "text": "Parameters\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nN\nint\nThe number to find coprimes for\nrequired"
  },
  {
    "objectID": "reference/helpers.euler_phi.html#returns",
    "href": "reference/helpers.euler_phi.html#returns",
    "title": "helpers.euler_phi",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nint\nThe number of positive integers from [1,N), less than and coprime to N"
  },
  {
    "objectID": "reference/helpers.euler_phi.html#examples",
    "href": "reference/helpers.euler_phi.html#examples",
    "title": "helpers.euler_phi",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\npyLHD.totatives(11)\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\n\npyLHD.euler_phi(11)\n\n10"
  },
  {
    "objectID": "reference/helpers.LinearPermutation.html",
    "href": "reference/helpers.LinearPermutation.html",
    "title": "helpers.LinearPermutation",
    "section": "",
    "text": "helpers.LinearPermutation(arr, b, modulus=None)\nApply a linear permutation to a Good lattice point (GLP) design\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnpt.ArrayLike\nA numpy ndarray\nrequired\n\n\nb\nUnion[int, list]\nValue by which each element in the array is to be linearly level permuted. Can either be an integer or a list of integers\nrequired\n\n\nmodulus\nint\nModulus used for the permutation. Defaults to None. If None, the number of rows is used as the modulus.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nnpt.ArrayLike: A new array where each element is the result of (arr + b) % modulus"
  },
  {
    "objectID": "reference/helpers.LinearPermutation.html#parameters",
    "href": "reference/helpers.LinearPermutation.html#parameters",
    "title": "helpers.LinearPermutation",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\narr\nnpt.ArrayLike\nA numpy ndarray\nrequired\n\n\nb\nUnion[int, list]\nValue by which each element in the array is to be linearly level permuted. Can either be an integer or a list of integers\nrequired\n\n\nmodulus\nint\nModulus used for the permutation. Defaults to None. If None, the number of rows is used as the modulus.\nNone"
  },
  {
    "objectID": "reference/helpers.LinearPermutation.html#returns",
    "href": "reference/helpers.LinearPermutation.html#returns",
    "title": "helpers.LinearPermutation",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nnpt.ArrayLike\nnpt.ArrayLike: A new array where each element is the result of (arr + b) % modulus"
  }
]