# helpers.scale { #pyLHD.helpers.scale }

`helpers.scale(arr, lower_bounds, upper_bounds)`

Sample scaling from unit hypercube to different bounds

## Parameters

| Name           | Type          | Description                      | Default    |
|----------------|---------------|----------------------------------|------------|
| `arr`          | npt.ArrayLike | A numpy ndarray                  | _required_ |
| `lower_bounds` | list          | Lower bounds of transformed data | _required_ |
| `upper_bounds` | list          | Upper bounds of transformed data | _required_ |

## Returns

| Type          | Description                                                         |
|---------------|---------------------------------------------------------------------|
| npt.ArrayLike | npt.ArrayLike: Scaled numpy ndarray to [lower_bounds, upper_bounds] |

## Examples



```{python}
import pyLHD
random_lhd = pyLHD.LatinHypercube(size = (10,2), seed = 1)
random_lhd
```
```{python}
lower_bounds = [-3,2]
upper_bounds = [10,4]
pyLHD.scale(random_lhd,lower_bounds, upper_bounds)
```