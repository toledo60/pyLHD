# Function reference {.doc .doc-index}

## Base Designs

Generate Random LHD

| | |
| --- | --- |
| [base.LatinSquare](base.LatinSquare.qmd#pyLHD.base.LatinSquare) | Generate a random (n x d) Latin square |
| [base.LatinHypercube](base.LatinHypercube.qmd#pyLHD.base.LatinHypercube) | Generate a random Latin Hypercube Design |
| [base.GoodLatticePoint](base.GoodLatticePoint.qmd#pyLHD.base.GoodLatticePoint) | Good Lattice Point (GLP) Design  |

## Hadamard Matrices

Constructions for Hadamard matrices

| | |
| --- | --- |
| [hadamard.is_Hadamard](hadamard.is_Hadamard.qmd#pyLHD.hadamard.is_Hadamard) | Determine if a matrix is a Hadamard matrix. |
| [hadamard.sylvester](hadamard.sylvester.qmd#pyLHD.hadamard.sylvester) | Hadamard matrix based on Sylvester's construction |
| [hadamard.paley](hadamard.paley.qmd#pyLHD.hadamard.paley) | Paley Construction  |
| [hadamard.jacobsthal_matrix](hadamard.jacobsthal_matrix.qmd#pyLHD.hadamard.jacobsthal_matrix) | Generate a Jacobsthal matrix  |

## Maximin LHD

Algebraic Constructions of Maximim LHD

| | |
| --- | --- |
| [maximin.best_linear_permutation](maximin.best_linear_permutation.qmd#pyLHD.maximin.best_linear_permutation) | Optimal linear permutation value to achieve larger L1-distance for a LHD |
| [maximin.EquidistantLHD](maximin.EquidistantLHD.qmd#pyLHD.maximin.EquidistantLHD) | Generate an Equidistant Latin Hypercube |
| [maximin.leave_one_out](maximin.leave_one_out.qmd#pyLHD.maximin.leave_one_out) | Apply the Leave-one-out Procedure to Generate a Maxmin LHD |
| [maximin.maximinLHD](maximin.maximinLHD.qmd#pyLHD.maximin.maximinLHD) | Generate a maximin LHD based on the L1-distance |

## Projection Designs

Algebraic Constructions for Optimized Projections of LHD

| | |
| --- | --- |
| [projections.best_linear_permutation](projections.best_linear_permutation.qmd#pyLHD.projections.best_linear_permutation) | Optimal linear permutation value to minimize the uniform projection criterion |
| [projections.UniformProLHD](projections.UniformProLHD.qmd#pyLHD.projections.UniformProLHD) | Generate a Uniform Projection Design |
| [projections.UPC_lower_bound](projections.UPC_lower_bound.qmd#pyLHD.projections.UPC_lower_bound) | Uniform Projection Criteria Lower Bound |

## Orthogonal LHD

Algebraic Constructions of Orthogonal LHD

| | |
| --- | --- |
| [orthogonal.OLHD_Butler01](orthogonal.OLHD_Butler01.qmd#pyLHD.orthogonal.OLHD_Butler01) | Orthogonal Latin Hypercube Design (OLHD). Based on the construction method of Butler (2001) |
| [orthogonal.OLHD_Cioppa07](orthogonal.OLHD_Cioppa07.qmd#pyLHD.orthogonal.OLHD_Cioppa07) | Orthogonal Latin Hyercube Design. Based on the construction method of Cioppa and Lucas (2007) |
| [orthogonal.OLHD_Lin09](orthogonal.OLHD_Lin09.qmd#pyLHD.orthogonal.OLHD_Lin09) | Orthogonal Latin Hypercube Design. Based on the construction method of Lin et al. (2009) |
| [orthogonal.OLHD_Sun10](orthogonal.OLHD_Sun10.qmd#pyLHD.orthogonal.OLHD_Sun10) | Orthogonal Latin Hypercube Design (OLHD). Based on the construction method of Sun et al. (2010) |
| [orthogonal.OLHD_Ye98](orthogonal.OLHD_Ye98.qmd#pyLHD.orthogonal.OLHD_Ye98) | Orthogonal Latin Hyercube Design. Based on the construction method of Ye (1998) |
| [orthogonal.OA2LHD](orthogonal.OA2LHD.qmd#pyLHD.orthogonal.OA2LHD) | Transform an Orthogonal Array (OA) into an LHD |

## Criteria

Space-filling and Projection Criterias for LHD

| | |
| --- | --- |
| [criteria.Criteria](criteria.Criteria.qmd#pyLHD.criteria.Criteria) | A class representing a collection of criteria functions. |
| [criteria.AvgAbsCor](criteria.AvgAbsCor.qmd#pyLHD.criteria.AvgAbsCor) | Calculate the Average Absolute Correlation |
| [criteria.coverage](criteria.coverage.qmd#pyLHD.criteria.coverage) | Compute the coverage measure for a design |
| [criteria.discrepancy](criteria.discrepancy.qmd#pyLHD.criteria.discrepancy) | Discrepancy of a given sample |
| [criteria.LqDistance](criteria.LqDistance.qmd#pyLHD.criteria.LqDistance) |  |
| [criteria.MaxAbsCor](criteria.MaxAbsCor.qmd#pyLHD.criteria.MaxAbsCor) | Calculate the Maximum Absolute Correlation |
| [criteria.MeshRatio](criteria.MeshRatio.qmd#pyLHD.criteria.MeshRatio) | Compute the meshratio criterion for a given design |
| [criteria.MaxProCriterion](criteria.MaxProCriterion.qmd#pyLHD.criteria.MaxProCriterion) | Calculate the Maximum Projection Criterion |
| [criteria.phi_p](criteria.phi_p.qmd#pyLHD.criteria.phi_p) | Calculate the phi_p Criterion |
| [criteria.UniformProCriterion](criteria.UniformProCriterion.qmd#pyLHD.criteria.UniformProCriterion) | Calculate the Uniform Projection Criterion |

## Helpers

Miscellaneous Utilities for Manipulating LHDs

| | |
| --- | --- |
| [helpers.are_coprime](helpers.are_coprime.qmd#pyLHD.helpers.are_coprime) | Check if two integers are coprime |
| [helpers.axis_combinations](helpers.axis_combinations.qmd#pyLHD.helpers.axis_combinations) | Generates all unique combinations of columns from the given array, selecting 'k' columns at a time. |
| [helpers.check_bounds](helpers.check_bounds.qmd#pyLHD.helpers.check_bounds) | Check conditions for bounds input |
| [helpers.distance_matrix](helpers.distance_matrix.qmd#pyLHD.helpers.distance_matrix) | Distance matrix based on specified distance measure |
| [helpers.euler_phi](helpers.euler_phi.qmd#pyLHD.helpers.euler_phi) | Euler's Totient function |
| [helpers.generate_primes](helpers.generate_primes.qmd#pyLHD.helpers.generate_primes) | Gernate the first `n` prime numbers |
| [helpers.generate_prime_powers](helpers.generate_prime_powers.qmd#pyLHD.helpers.generate_prime_powers) | Generate the first `n` prime powers |
| [helpers.is_cyclic](helpers.is_cyclic.qmd#pyLHD.helpers.is_cyclic) | Verify an array is cylic |
| [helpers.is_prime](helpers.is_prime.qmd#pyLHD.helpers.is_prime) | Determine if a number is prime |
| [helpers.is_symmetric](helpers.is_symmetric.qmd#pyLHD.helpers.is_symmetric) | Verify is a matrix is symmetric |
| [helpers.is_skew_symmetric](helpers.is_skew_symmetric.qmd#pyLHD.helpers.is_skew_symmetric) | Verify is a matrix is skew-symmetric |
| [helpers.is_LHD](helpers.is_LHD.qmd#pyLHD.helpers.is_LHD) | Verify Latinhypercube sampling conditions |
| [helpers.is_balanced_design](helpers.is_balanced_design.qmd#pyLHD.helpers.is_balanced_design) | Verify a design is balanced |
| [helpers.level_permutation](helpers.level_permutation.qmd#pyLHD.helpers.level_permutation) | Apply level permutations to a Good lattice point (GLP) design |
| [helpers.permute_columns](helpers.permute_columns.qmd#pyLHD.helpers.permute_columns) | Randomly permute columns in a numpy ndarray |
| [helpers.permute_rows](helpers.permute_rows.qmd#pyLHD.helpers.permute_rows) | Randomly permute rows in a numpy ndarray |
| [helpers.primes_range](helpers.primes_range.qmd#pyLHD.helpers.primes_range) | Generate prime numbers from a specified range |
| [helpers.replace_values](helpers.replace_values.qmd#pyLHD.helpers.replace_values) | Replace values in a numpy array based on a provided mapping dictionary |
| [helpers.scale](helpers.scale.qmd#pyLHD.helpers.scale) | Sample scaling from unit hypercube to different bounds |
| [helpers.swap_elements](helpers.swap_elements.qmd#pyLHD.helpers.swap_elements) | Swap two random elements in a matrix |
| [helpers.totatives](helpers.totatives.qmd#pyLHD.helpers.totatives) | Generate all positive integers less than and coprime to N from [1,N) |
| [helpers.verify_generator](helpers.verify_generator.qmd#pyLHD.helpers.verify_generator) | Verify generator used to construct good lattice points (GLP) design |
| [helpers.WilliamsTransform](helpers.WilliamsTransform.qmd#pyLHD.helpers.WilliamsTransform) | Williams Transformation |
| [helpers.zero_base](helpers.zero_base.qmd#pyLHD.helpers.zero_base) | Normalize the columns by subtracting the minimum element of each column |