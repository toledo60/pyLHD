# Function reference

## Base Designs

Generate Random LHD

| | |
| --- | --- |
| [base.LatinSquare](base.LatinSquare.qmd#pyLHD.base.LatinSquare) | Generate a (n x d) Latin square, where each column is a random permutation from {baseline,baseline+1, ..., baseline+(n-1)} |
| [base.LatinHypercube](base.LatinHypercube.qmd#pyLHD.base.LatinHypercube) | Generate a random Latin Hypercube Design |
| [base.GoodLatticePoint](base.GoodLatticePoint.qmd#pyLHD.base.GoodLatticePoint) | Good Lattice Point (GLP) Design  |

## Orthogonal LHD

Various constructions of orthogonal latin hypercube designs

| | |
| --- | --- |
| [orthogonal.OLHD_Butler01](orthogonal.OLHD_Butler01.qmd#pyLHD.orthogonal.OLHD_Butler01) | Orthogonal Latin Hypercube Design (OLHD). Based on the construction method of Butler (2001) |
| [orthogonal.OLHD_Cioppa07](orthogonal.OLHD_Cioppa07.qmd#pyLHD.orthogonal.OLHD_Cioppa07) | Orthogonal Latin Hyercube Design. Based on the construction method of Cioppa and Lucas (2007) |
| [orthogonal.OLHD_Lin09](orthogonal.OLHD_Lin09.qmd#pyLHD.orthogonal.OLHD_Lin09) | Orthogonal Latin Hypercube Design. Based on the construction method of Lin et al. (2009) |
| [orthogonal.OLHD_Sun10](orthogonal.OLHD_Sun10.qmd#pyLHD.orthogonal.OLHD_Sun10) | Orthogonal Latin Hypercube Design (OLHD). Based on the construction method of Sun et al. (2010) |
| [orthogonal.OLHD_Ye98](orthogonal.OLHD_Ye98.qmd#pyLHD.orthogonal.OLHD_Ye98) | Orthogonal Latin Hyercube Design. Based on the construction method of Ye (1998) |
| [orthogonal.OA2LHD](orthogonal.OA2LHD.qmd#pyLHD.orthogonal.OA2LHD) | Transform an Orthogonal Array (OA) into an LHD |

## Criteria

Space-filling Criterias for LHD

| | |
| --- | --- |
| [criteria.Criteria](criteria.Criteria.qmd#pyLHD.criteria.Criteria) | A class representing a collection of criteria functions. |
| [criteria.AvgAbsCor](criteria.AvgAbsCor.qmd#pyLHD.criteria.AvgAbsCor) | Calculate the Average Absolute Correlation |
| [criteria.coverage](criteria.coverage.qmd#pyLHD.criteria.coverage) | Compute the coverage measure for a design |
| [criteria.discrepancy](criteria.discrepancy.qmd#pyLHD.criteria.discrepancy) | Discrepancy of a given sample |
| [criteria.InterSite](criteria.InterSite.qmd#pyLHD.criteria.InterSite) | Calculate the Inter-site Distance |
| [criteria.pairwise_InterSite](criteria.pairwise_InterSite.qmd#pyLHD.criteria.pairwise_InterSite) | Calculate the Inter-site Distance between all pairwise rows |
| [criteria.LqDistance](criteria.LqDistance.qmd#pyLHD.criteria.LqDistance) | Calculate the Lq-Distance of a Latin Hypercube Design |
| [criteria.MaxAbsCor](criteria.MaxAbsCor.qmd#pyLHD.criteria.MaxAbsCor) | Calculate the Maximum Absolute Correlation |
| [criteria.maximin](criteria.maximin.qmd#pyLHD.criteria.maximin) | Compute the maximin criterion for a given design. A higher value corresponds to a more regular scattering of design points. |
| [criteria.MeshRatio](criteria.MeshRatio.qmd#pyLHD.criteria.MeshRatio) | Compute the meshratio criterion for a given design |
| [criteria.MaxProCriterion](criteria.MaxProCriterion.qmd#pyLHD.criteria.MaxProCriterion) | Calculate the Maximum Projection Criterion |
| [criteria.phi_p](criteria.phi_p.qmd#pyLHD.criteria.phi_p) | Calculate the phi_p Criterion |
| [criteria.UniformProCriterion](criteria.UniformProCriterion.qmd#pyLHD.criteria.UniformProCriterion) | Calculate the Uniform Projection Criterion |

## Helpers

miscellaneous utilities for working with LHDs

| | |
| --- | --- |
| [helpers.check_bounds](helpers.check_bounds.qmd#pyLHD.helpers.check_bounds) | Check conditions for bounds input |
| [helpers.column_combinations](helpers.column_combinations.qmd#pyLHD.helpers.column_combinations) | Generates all unique combinations of columns from the given array, selecting 'k' columns at a time. |
| [helpers.distance_matrix](helpers.distance_matrix.qmd#pyLHD.helpers.distance_matrix) | Distance matrix based on specified distance measure |
| [helpers.is_LHD](helpers.is_LHD.qmd#pyLHD.helpers.is_LHD) | Verify Latinhypercube sampling conditions |
| [helpers.is_balanced_design](helpers.is_balanced_design.qmd#pyLHD.helpers.is_balanced_design) | Verify a design is balanced |
| [helpers.lapply](helpers.lapply.qmd#pyLHD.helpers.lapply) | Apply a function to each item in a list |
| [helpers.permute_columns](helpers.permute_columns.qmd#pyLHD.helpers.permute_columns) | Randomly permute columns in a numpy ndarray |
| [helpers.permute_rows](helpers.permute_rows.qmd#pyLHD.helpers.permute_rows) | Randomly permute rows in a numpy ndarray |
| [helpers.replace_values](helpers.replace_values.qmd#pyLHD.helpers.replace_values) | Replace values in a numpy array based on a provided mapping dictionary |
| [helpers.scale](helpers.scale.qmd#pyLHD.helpers.scale) | Sample scaling from unit hypercube to different bounds |
| [helpers.swap_elements](helpers.swap_elements.qmd#pyLHD.helpers.swap_elements) | Swap two random elements in a matrix |
| [helpers.williams_transform](helpers.williams_transform.qmd#pyLHD.helpers.williams_transform) | Williams Transformation |