# maximin.EquidistantLHD { #pyLHD.maximin.EquidistantLHD }

`maximin.EquidistantLHD(N)`

Generate an Equidistant Latin Hypercube

## Parameters

| Name   | Type   | Description    | Default    |
|--------|--------|----------------|------------|
| `N`    | int    | An odd integer | _required_ |

## Returns

| Type          | Description                                                                                                                                                                                                                                                       |
|---------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| npt.ArrayLike | npt.ArrayLike: Given an odd integer $N=(2m+1)$, return an $(m \times m)$ equidistant LHD.  This design, is a cyclic Latin square, with each level occuring once in each row and once in each column. It is also a maximin distance LHD in terms of $L_1$-distance |

Example:
```{python}
import pyLHD
N = 11
x = pyLHD.EquidistantLHD(N = N)
x
```
```{python}
pyLHD.pairwise_InterSite(x, q=1)
```
```{python}
pyLHD.LqDistance(x, q=1)
```