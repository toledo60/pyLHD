# helpers.level_permutation { #pyLHD.helpers.level_permutation }

`helpers.level_permutation(arr, b, modulus=None)`

Apply level permutations to a Good lattice point (GLP) design

## Parameters

| Name      | Type                      | Description                                                                                                      | Default    |
|-----------|---------------------------|------------------------------------------------------------------------------------------------------------------|------------|
| `arr`     | numpy.numpy.ArrayLike     | A numpy ndarray                                                                                                  | _required_ |
| `b`       | typing.Union\[int, list\] | Value by which each element in the array is to be level permuted. Can either be an integer or a list of integers | _required_ |
| `modulus` | int                       | Modulus used for the permutation. Defaults to None. If None, the number of rows is used as the modulus.          | `None`     |

## Returns

| Type                | Description                                                                          |
|---------------------|--------------------------------------------------------------------------------------|
| numpy.numpy.ndarray | npt.ArrayLike: A new array where each element is the result of `(arr + b) % modulus` |

Examples:
```{python}
import pyLHD
GLP = pyLHD.GoodLatticePoint(size = (10, pyLHD.euler_phi(10)))
GLP
```
Apply a simple linear level permutation in the form of $D = D+b (mod N)$
```{python}
pyLHD.level_permutation(GLP,b = 2)
```
```{python}
pyLHD.level_permutation(GLP, b = [1,4,3,2])
```