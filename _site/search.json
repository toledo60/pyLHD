[
  {
    "objectID": "docs/base_designs.GLPdesign.html",
    "href": "docs/base_designs.GLPdesign.html",
    "title": "base_designs.GLPdesign",
    "section": "",
    "text": "base_designs.GLPdesign(n_rows, n_columns, h=None)\nGood Lattice Point (GLP) Design"
  },
  {
    "objectID": "docs/base_designs.GLPdesign.html#parameters",
    "href": "docs/base_designs.GLPdesign.html#parameters",
    "title": "base_designs.GLPdesign",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nn_rows\nint\nA positive integer specifying the number of rows\nrequired\n\n\nn_columns\nint\nA postive integer specifying the number of columns h (list, optional): A list whose length is same as (n_columns), with its elements that are smaller than and coprime to (n_rows). Defaults to None. If None, a random sample of (n_columns) elements between 1 and (n_rows-1).\nrequired"
  },
  {
    "objectID": "docs/base_designs.GLPdesign.html#returns",
    "href": "docs/base_designs.GLPdesign.html#returns",
    "title": "base_designs.GLPdesign",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nA (n_rows by n_columns) GLP design."
  },
  {
    "objectID": "docs/base_designs.GLPdesign.html#examples",
    "href": "docs/base_designs.GLPdesign.html#examples",
    "title": "base_designs.GLPdesign",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\npyLHD.GLPdesign(n_rows=5,n_columns=3)\n\narray([[2, 3, 1],\n       [4, 1, 2],\n       [1, 4, 3],\n       [3, 2, 4],\n       [0, 0, 0]])\n\n\n\npyLHD.GLPdesign(n_rows=8,n_columns=4,h=[1,3,5,7])\n\narray([[3, 7, 5, 1],\n       [6, 6, 2, 2],\n       [1, 5, 7, 3],\n       [4, 4, 4, 4],\n       [7, 3, 1, 5],\n       [2, 2, 6, 6],\n       [5, 1, 3, 7],\n       [0, 0, 0, 0]])"
  },
  {
    "objectID": "docs/utils.exchange.html",
    "href": "docs/utils.exchange.html",
    "title": "utils.exchange",
    "section": "",
    "text": "utils.exchange(arr, idx, type='col')\nExchange two random elements in a matrix"
  },
  {
    "objectID": "docs/utils.exchange.html#parameters",
    "href": "docs/utils.exchange.html#parameters",
    "title": "utils.exchange",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnumpy.ndarray\nA design matrix\nrequired\n\n\nidx\nint\nA positive integer, which stands for the (idx) column or row of (arr) type (str, optional): If type is ‘col’, two random elements will be exchanged within column (idx). If type is ‘row’, two random elements will be exchanged within row (idx). Defaults to ‘col’.\nrequired"
  },
  {
    "objectID": "docs/utils.exchange.html#returns",
    "href": "docs/utils.exchange.html#returns",
    "title": "utils.exchange",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nA new design matrix after the exchange"
  },
  {
    "objectID": "docs/utils.exchange.html#examples",
    "href": "docs/utils.exchange.html#examples",
    "title": "utils.exchange",
    "section": "Examples",
    "text": "Examples\nChoose the first columns of random_lhd and exchange two randomly selected elements\n\nimport pyLHD\nrandom_lhd = pyLHD.random_lhd(n_rows = 5, n_columns = 3)\nrandom_lhd\n\narray([[0.40287285, 0.00287285, 0.20287285],\n       [0.00287285, 0.40287285, 0.80287285],\n       [0.20287285, 0.60287285, 0.40287285],\n       [0.80287285, 0.20287285, 0.60287285],\n       [0.60287285, 0.80287285, 0.00287285]])\n\n\nChoose column 1 of random_lhd and exchange two randomly selected elements\n\npyLHD.exchange(random_lhd,idx=1,type='col')\n\narray([[0.40287285, 0.00287285, 0.20287285],\n       [0.00287285, 0.60287285, 0.80287285],\n       [0.20287285, 0.40287285, 0.40287285],\n       [0.80287285, 0.20287285, 0.60287285],\n       [0.60287285, 0.80287285, 0.00287285]])\n\n\nChoose the first row of random_lhd and exchange two randomly selected elements\n\npyLHD.exchange(random_lhd,idx=1,type='row')\n\narray([[0.40287285, 0.00287285, 0.20287285],\n       [0.00287285, 0.80287285, 0.60287285],\n       [0.20287285, 0.40287285, 0.40287285],\n       [0.80287285, 0.20287285, 0.60287285],\n       [0.60287285, 0.80287285, 0.00287285]])"
  },
  {
    "objectID": "docs/criteria.dij.html",
    "href": "docs/criteria.dij.html",
    "title": "criteria.dij",
    "section": "",
    "text": "criteria.dij(arr, i, j, q=1)\nCalculate the Inter-site Distance"
  },
  {
    "objectID": "docs/criteria.dij.html#parameters",
    "href": "docs/criteria.dij.html#parameters",
    "title": "criteria.dij",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnumpy.ndarray\nA design matrix\nrequired\n\n\ni\nint\nA positive integer, which stands for the ith row of (arr)\nrequired\n\n\nj\nint\nA positive integer, which stands for the jth row of (arr)\nrequired\n\n\nq\nint\nThe default is set to be 1, and it could be either 1 or 2. If (q) is 1, (dij) is the Manhattan (rectangular) distance. If (q) is 2, (dij) is the Euclidean distance.\n1"
  },
  {
    "objectID": "docs/criteria.dij.html#returns",
    "href": "docs/criteria.dij.html#returns",
    "title": "criteria.dij",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nfloat\npositive number indicating the distance (rectangular or Euclidean) between the ith and jth row of arr"
  },
  {
    "objectID": "docs/criteria.dij.html#examples",
    "href": "docs/criteria.dij.html#examples",
    "title": "criteria.dij",
    "section": "Examples",
    "text": "Examples\nCalculate the inter-site distance of the 2nd and the 4th row of random_lhd\n\nimport pyLHD\nrandom_lhd = pyLHD.random_lhd(n_rows=10,n_columns=3)\npyLHD.dij(random_lhd,i=2,j=4)\n\n1.2000000000000002\n\n\nCalculate the inter-site distance of the 2nd and the 4th row of random_lhd with q=2 (Euclidean)\n\npyLHD.dij(random_lhd,i=2,j=4,q=2)\n\n0.7874007874011811"
  },
  {
    "objectID": "docs/criteria.AvgAbsCor.html",
    "href": "docs/criteria.AvgAbsCor.html",
    "title": "criteria.AvgAbsCor",
    "section": "",
    "text": "criteria.AvgAbsCor(arr)\nCalculate the Average Absolute Correlation"
  },
  {
    "objectID": "docs/criteria.AvgAbsCor.html#parameters",
    "href": "docs/criteria.AvgAbsCor.html#parameters",
    "title": "criteria.AvgAbsCor",
    "section": "Parameters",
    "text": "Parameters\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnumpy.ndarray\nA design matrix\nrequired"
  },
  {
    "objectID": "docs/criteria.AvgAbsCor.html#returns",
    "href": "docs/criteria.AvgAbsCor.html#returns",
    "title": "criteria.AvgAbsCor",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nfloat\nA positive number indicating the average absolute correlation\n\n\nfloat\nof input matrix"
  },
  {
    "objectID": "docs/criteria.AvgAbsCor.html#examples",
    "href": "docs/criteria.AvgAbsCor.html#examples",
    "title": "criteria.AvgAbsCor",
    "section": "Examples",
    "text": "Examples\nCalculate the average absolute correlation of random_lhd\n\nimport pyLHD\nrandom_lhd = pyLHD.random_lhd(n_rows=10,n_columns=3)\npyLHD.AvgAbsCor(random_lhd)\n\n0.3414141414141414"
  },
  {
    "objectID": "docs/OLHD.OLHD_Sun10.html",
    "href": "docs/OLHD.OLHD_Sun10.html",
    "title": "OLHD.OLHD_Sun10",
    "section": "",
    "text": "OLHD.OLHD_Sun10(C, r, type='odd')\nOrthogonal Latin Hypercube Design (OLHD). Based on the construction method of Sun et al. (2010)"
  },
  {
    "objectID": "docs/OLHD.OLHD_Sun10.html#parameters",
    "href": "docs/OLHD.OLHD_Sun10.html#parameters",
    "title": "OLHD.OLHD_Sun10",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nC\nint\nA positve integer.\nrequired\n\n\nr\nint\nA positve integer.\nrequired\n\n\ntype\nstr\nRun size of design, this can be either odd or even. Defaults to ‘odd’. If (type) is ‘odd’ the run size of the OLHD will be (r2^(C+1)+1). If (type) is ‘even’ the run size of the OLHD will be (r2^(C+1))\n'odd'"
  },
  {
    "objectID": "docs/OLHD.OLHD_Sun10.html#returns",
    "href": "docs/OLHD.OLHD_Sun10.html#returns",
    "title": "OLHD.OLHD_Sun10",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nAn orthogonal LHD with the following run size: (r2^(C+1)+1) if type =‘odd’, or (r2^(C+1)) if type =‘even’. The resulting columns will be (2^(C))"
  },
  {
    "objectID": "docs/OLHD.OLHD_Sun10.html#examples",
    "href": "docs/OLHD.OLHD_Sun10.html#examples",
    "title": "OLHD.OLHD_Sun10",
    "section": "Examples",
    "text": "Examples\nCreate an orthogonal LHD with C=3, r=3, type = ‘odd’, so n = (3*2^(3+1) )+1 = 49 (rows) and k=2^(3)=8 (columns)\n\nimport pyLHD\npyLHD.OLHD_Sun10(C=3,r=3,type='odd')\n\narray([[  1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.],\n       [  2.,  -1.,  -4.,   3.,   6.,  -5.,  -8.,   7.],\n       [  3.,   4.,  -1.,  -2.,  -7.,  -8.,   5.,   6.],\n       [  4.,  -3.,   2.,  -1.,  -8.,   7.,  -6.,   5.],\n       [  5.,   6.,   7.,   8.,  -1.,  -2.,  -3.,  -4.],\n       [  6.,  -5.,  -8.,   7.,  -2.,   1.,   4.,  -3.],\n       [  7.,   8.,  -5.,  -6.,   3.,   4.,  -1.,  -2.],\n       [  8.,  -7.,   6.,  -5.,   4.,  -3.,   2.,  -1.],\n       [  9.,  10.,  11.,  12.,  13.,  14.,  15.,  16.],\n       [ 10.,  -9., -12.,  11.,  14., -13., -16.,  15.],\n       [ 11.,  12.,  -9., -10., -15., -16.,  13.,  14.],\n       [ 12., -11.,  10.,  -9., -16.,  15., -14.,  13.],\n       [ 13.,  14.,  15.,  16.,  -9., -10., -11., -12.],\n       [ 14., -13., -16.,  15., -10.,   9.,  12., -11.],\n       [ 15.,  16., -13., -14.,  11.,  12.,  -9., -10.],\n       [ 16., -15.,  14., -13.,  12., -11.,  10.,  -9.],\n       [ 17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.],\n       [ 18., -17., -20.,  19.,  22., -21., -24.,  23.],\n       [ 19.,  20., -17., -18., -23., -24.,  21.,  22.],\n       [ 20., -19.,  18., -17., -24.,  23., -22.,  21.],\n       [ 21.,  22.,  23.,  24., -17., -18., -19., -20.],\n       [ 22., -21., -24.,  23., -18.,  17.,  20., -19.],\n       [ 23.,  24., -21., -22.,  19.,  20., -17., -18.],\n       [ 24., -23.,  22., -21.,  20., -19.,  18., -17.],\n       [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],\n       [ -1.,  -2.,  -3.,  -4.,  -5.,  -6.,  -7.,  -8.],\n       [ -2.,   1.,   4.,  -3.,  -6.,   5.,   8.,  -7.],\n       [ -3.,  -4.,   1.,   2.,   7.,   8.,  -5.,  -6.],\n       [ -4.,   3.,  -2.,   1.,   8.,  -7.,   6.,  -5.],\n       [ -5.,  -6.,  -7.,  -8.,   1.,   2.,   3.,   4.],\n       [ -6.,   5.,   8.,  -7.,   2.,  -1.,  -4.,   3.],\n       [ -7.,  -8.,   5.,   6.,  -3.,  -4.,   1.,   2.],\n       [ -8.,   7.,  -6.,   5.,  -4.,   3.,  -2.,   1.],\n       [ -9., -10., -11., -12., -13., -14., -15., -16.],\n       [-10.,   9.,  12., -11., -14.,  13.,  16., -15.],\n       [-11., -12.,   9.,  10.,  15.,  16., -13., -14.],\n       [-12.,  11., -10.,   9.,  16., -15.,  14., -13.],\n       [-13., -14., -15., -16.,   9.,  10.,  11.,  12.],\n       [-14.,  13.,  16., -15.,  10.,  -9., -12.,  11.],\n       [-15., -16.,  13.,  14., -11., -12.,   9.,  10.],\n       [-16.,  15., -14.,  13., -12.,  11., -10.,   9.],\n       [-17., -18., -19., -20., -21., -22., -23., -24.],\n       [-18.,  17.,  20., -19., -22.,  21.,  24., -23.],\n       [-19., -20.,  17.,  18.,  23.,  24., -21., -22.],\n       [-20.,  19., -18.,  17.,  24., -23.,  22., -21.],\n       [-21., -22., -23., -24.,  17.,  18.,  19.,  20.],\n       [-22.,  21.,  24., -23.,  18., -17., -20.,  19.],\n       [-23., -24.,  21.,  22., -19., -20.,  17.,  18.],\n       [-24.,  23., -22.,  21., -20.,  19., -18.,  17.]])\n\n\nCreate an orthogonal LHD with C=3, r=3, type = ‘even’, So n = 3*2^(3+1) = 48 (rows) and k=2^(3)=8 (columns)\n\nimport pyLHD\npyLHD.OLHD_Sun10(C=3,r=3,type='even')\n\narray([[  0.5,   1.5,   2.5,   3.5,   4.5,   5.5,   6.5,   7.5],\n       [  1.5,  -0.5,  -3.5,   2.5,   5.5,  -4.5,  -7.5,   6.5],\n       [  2.5,   3.5,  -0.5,  -1.5,  -6.5,  -7.5,   4.5,   5.5],\n       [  3.5,  -2.5,   1.5,  -0.5,  -7.5,   6.5,  -5.5,   4.5],\n       [  4.5,   5.5,   6.5,   7.5,  -0.5,  -1.5,  -2.5,  -3.5],\n       [  5.5,  -4.5,  -7.5,   6.5,  -1.5,   0.5,   3.5,  -2.5],\n       [  6.5,   7.5,  -4.5,  -5.5,   2.5,   3.5,  -0.5,  -1.5],\n       [  7.5,  -6.5,   5.5,  -4.5,   3.5,  -2.5,   1.5,  -0.5],\n       [  8.5,   9.5,  10.5,  11.5,  12.5,  13.5,  14.5,  15.5],\n       [  9.5,  -8.5, -11.5,  10.5,  13.5, -12.5, -15.5,  14.5],\n       [ 10.5,  11.5,  -8.5,  -9.5, -14.5, -15.5,  12.5,  13.5],\n       [ 11.5, -10.5,   9.5,  -8.5, -15.5,  14.5, -13.5,  12.5],\n       [ 12.5,  13.5,  14.5,  15.5,  -8.5,  -9.5, -10.5, -11.5],\n       [ 13.5, -12.5, -15.5,  14.5,  -9.5,   8.5,  11.5, -10.5],\n       [ 14.5,  15.5, -12.5, -13.5,  10.5,  11.5,  -8.5,  -9.5],\n       [ 15.5, -14.5,  13.5, -12.5,  11.5, -10.5,   9.5,  -8.5],\n       [ 16.5,  17.5,  18.5,  19.5,  20.5,  21.5,  22.5,  23.5],\n       [ 17.5, -16.5, -19.5,  18.5,  21.5, -20.5, -23.5,  22.5],\n       [ 18.5,  19.5, -16.5, -17.5, -22.5, -23.5,  20.5,  21.5],\n       [ 19.5, -18.5,  17.5, -16.5, -23.5,  22.5, -21.5,  20.5],\n       [ 20.5,  21.5,  22.5,  23.5, -16.5, -17.5, -18.5, -19.5],\n       [ 21.5, -20.5, -23.5,  22.5, -17.5,  16.5,  19.5, -18.5],\n       [ 22.5,  23.5, -20.5, -21.5,  18.5,  19.5, -16.5, -17.5],\n       [ 23.5, -22.5,  21.5, -20.5,  19.5, -18.5,  17.5, -16.5],\n       [ -0.5,  -1.5,  -2.5,  -3.5,  -4.5,  -5.5,  -6.5,  -7.5],\n       [ -1.5,   0.5,   3.5,  -2.5,  -5.5,   4.5,   7.5,  -6.5],\n       [ -2.5,  -3.5,   0.5,   1.5,   6.5,   7.5,  -4.5,  -5.5],\n       [ -3.5,   2.5,  -1.5,   0.5,   7.5,  -6.5,   5.5,  -4.5],\n       [ -4.5,  -5.5,  -6.5,  -7.5,   0.5,   1.5,   2.5,   3.5],\n       [ -5.5,   4.5,   7.5,  -6.5,   1.5,  -0.5,  -3.5,   2.5],\n       [ -6.5,  -7.5,   4.5,   5.5,  -2.5,  -3.5,   0.5,   1.5],\n       [ -7.5,   6.5,  -5.5,   4.5,  -3.5,   2.5,  -1.5,   0.5],\n       [ -8.5,  -9.5, -10.5, -11.5, -12.5, -13.5, -14.5, -15.5],\n       [ -9.5,   8.5,  11.5, -10.5, -13.5,  12.5,  15.5, -14.5],\n       [-10.5, -11.5,   8.5,   9.5,  14.5,  15.5, -12.5, -13.5],\n       [-11.5,  10.5,  -9.5,   8.5,  15.5, -14.5,  13.5, -12.5],\n       [-12.5, -13.5, -14.5, -15.5,   8.5,   9.5,  10.5,  11.5],\n       [-13.5,  12.5,  15.5, -14.5,   9.5,  -8.5, -11.5,  10.5],\n       [-14.5, -15.5,  12.5,  13.5, -10.5, -11.5,   8.5,   9.5],\n       [-15.5,  14.5, -13.5,  12.5, -11.5,  10.5,  -9.5,   8.5],\n       [-16.5, -17.5, -18.5, -19.5, -20.5, -21.5, -22.5, -23.5],\n       [-17.5,  16.5,  19.5, -18.5, -21.5,  20.5,  23.5, -22.5],\n       [-18.5, -19.5,  16.5,  17.5,  22.5,  23.5, -20.5, -21.5],\n       [-19.5,  18.5, -17.5,  16.5,  23.5, -22.5,  21.5, -20.5],\n       [-20.5, -21.5, -22.5, -23.5,  16.5,  17.5,  18.5,  19.5],\n       [-21.5,  20.5,  23.5, -22.5,  17.5, -16.5, -19.5,  18.5],\n       [-22.5, -23.5,  20.5,  21.5, -18.5, -19.5,  16.5,  17.5],\n       [-23.5,  22.5, -21.5,  20.5, -19.5,  18.5, -17.5,  16.5]])"
  },
  {
    "objectID": "docs/utils.williams_transform.html",
    "href": "docs/utils.williams_transform.html",
    "title": "utils.williams_transform",
    "section": "",
    "text": "utils.williams_transform(arr, baseline=1)\nWilliams Transformation"
  },
  {
    "objectID": "docs/utils.williams_transform.html#parameters",
    "href": "docs/utils.williams_transform.html#parameters",
    "title": "utils.williams_transform",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnumpy.ndarray\nA design matrix\nrequired\n\n\nbaseline\nint\nA integer, which defines the minimum value for each column of the matrix. Defaults to 1.\n1"
  },
  {
    "objectID": "docs/utils.williams_transform.html#returns",
    "href": "docs/utils.williams_transform.html#returns",
    "title": "utils.williams_transform",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nAfter applying Williams transformation, a matrix whose sizes are the same as input matrix"
  },
  {
    "objectID": "docs/utils.williams_transform.html#examples",
    "href": "docs/utils.williams_transform.html#examples",
    "title": "utils.williams_transform",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\nrandom_lhd = pyLHD.random_lhd(n_rows=5,n_columns=3)\nrandom_lhd\n\narray([[0.17954415, 0.17954415, 0.77954415],\n       [0.97954415, 0.37954415, 0.57954415],\n       [0.77954415, 0.57954415, 0.97954415],\n       [0.37954415, 0.97954415, 0.17954415],\n       [0.57954415, 0.77954415, 0.37954415]])\n\n\nChange the baseline\n\npyLHD.williams_transform(random_lhd,baseline=3)\n\narray([[3. , 3. , 4.2],\n       [4.6, 3.4, 3.8],\n       [4.2, 3.8, 4.6],\n       [3.4, 4.6, 3. ],\n       [3.8, 4.2, 3.4]])"
  },
  {
    "objectID": "docs/criteria.coverage.html",
    "href": "docs/criteria.coverage.html",
    "title": "criteria.coverage",
    "section": "",
    "text": "criteria.coverage(arr)\nCompute the coverage measure for a design"
  },
  {
    "objectID": "docs/criteria.coverage.html#parameters",
    "href": "docs/criteria.coverage.html#parameters",
    "title": "criteria.coverage",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnumpy.ndarray\nA design matrix. If design matrix is not within [0,1], the origianl design will be scaled to [0,1]\nrequired"
  },
  {
    "objectID": "docs/criteria.coverage.html#raises",
    "href": "docs/criteria.coverage.html#raises",
    "title": "criteria.coverage",
    "section": "Raises",
    "text": "Raises\n\n\n\nType\nDescription\n\n\n\n\nValueError\nWhenever number of rows is less than number of columns"
  },
  {
    "objectID": "docs/criteria.coverage.html#returns",
    "href": "docs/criteria.coverage.html#returns",
    "title": "criteria.coverage",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nfloat\nCoverage measure"
  },
  {
    "objectID": "docs/criteria.coverage.html#examples",
    "href": "docs/criteria.coverage.html#examples",
    "title": "criteria.coverage",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\nrandom_lhd = pyLHD.random_lhd(n_rows=5,n_columns=5)\npyLHD.coverage(random_lhd)\n\n0.21438158371619673"
  },
  {
    "objectID": "docs/utils.permute_columns.html",
    "href": "docs/utils.permute_columns.html",
    "title": "utils.permute_columns",
    "section": "",
    "text": "utils.permute_columns(arr, columns=None, seed=None)\nRandom permute columns in a numpy ndarray"
  },
  {
    "objectID": "docs/utils.permute_columns.html#parameters",
    "href": "docs/utils.permute_columns.html#parameters",
    "title": "utils.permute_columns",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnpt.ArrayLike\nA numpy ndarray\nrequired\n\n\ncolumns\nOptional[List[int]]\nIf columns is None all columns will be randomly permuted, otherwise provide a list of columns to permute. Defaults to None.\nNone\n\n\nseed\nOptional[int]\nIf seed is an int or None, a new numpy.random.Generator is created using np.random.default_rng(seed). Defaults to None.\nNone"
  },
  {
    "objectID": "docs/utils.permute_columns.html#returns",
    "href": "docs/utils.permute_columns.html#returns",
    "title": "utils.permute_columns",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nnumpy ndarray with columns of choice randomly permuted"
  },
  {
    "objectID": "docs/utils.permute_columns.html#examples",
    "href": "docs/utils.permute_columns.html#examples",
    "title": "utils.permute_columns",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\nx = pyLHD.random_lhd(n_rows = 5, n_columns = 3, seed = 1)\nx\n\narray([[0.69763568, 0.29763568, 0.09763568],\n       [0.89763568, 0.49763568, 0.89763568],\n       [0.09763568, 0.69763568, 0.29763568],\n       [0.49763568, 0.89763568, 0.69763568],\n       [0.29763568, 0.09763568, 0.49763568]])\n\n\nPermute all columns\n\npyLHD.permute_columns(x)\n\narray([[0.49763568, 0.69763568, 0.29763568],\n       [0.09763568, 0.09763568, 0.49763568],\n       [0.29763568, 0.29763568, 0.09763568],\n       [0.69763568, 0.89763568, 0.89763568],\n       [0.89763568, 0.49763568, 0.69763568]])\n\n\nPermute columns [0,1] with seed=1\n\npyLHD.permute_columns(x, columns = [0,1], seed = 1)\n\narray([[0.29763568, 0.89763568, 0.09763568],\n       [0.69763568, 0.29763568, 0.89763568],\n       [0.89763568, 0.49763568, 0.29763568],\n       [0.09763568, 0.09763568, 0.69763568],\n       [0.49763568, 0.69763568, 0.49763568]])"
  },
  {
    "objectID": "docs/utils.adjust_range.html",
    "href": "docs/utils.adjust_range.html",
    "title": "utils.adjust_range",
    "section": "",
    "text": "utils.adjust_range(arr, min, max, digits=None)\nAdjust the range of a design to [min,max]"
  },
  {
    "objectID": "docs/utils.adjust_range.html#parameters",
    "href": "docs/utils.adjust_range.html#parameters",
    "title": "utils.adjust_range",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnumpy.ndarray\nA design matrix\nrequired\n\n\nmin\nfloat\ndesired lower bound of design\nrequired\n\n\nmax\nfloat\ndesired upper bound of design\nrequired\n\n\ndigits\nint\nnumber of digits to which the design is rounded\nNone"
  },
  {
    "objectID": "docs/utils.adjust_range.html#returns",
    "href": "docs/utils.adjust_range.html#returns",
    "title": "utils.adjust_range",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nDesign with new range [min,max]"
  },
  {
    "objectID": "docs/utils.adjust_range.html#examples",
    "href": "docs/utils.adjust_range.html#examples",
    "title": "utils.adjust_range",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\nrandom_lhd = pyLHD.random_lhd(n_rows=5,n_columns=3)\n\n\npyLHD.adjust_range(random_lhd,-1, 1)\n\narray([[-5.00000000e-01, -1.11022302e-16, -1.00000000e+00],\n       [ 1.00000000e+00, -5.00000000e-01, -1.11022302e-16],\n       [-1.00000000e+00,  5.00000000e-01, -5.00000000e-01],\n       [-1.11022302e-16,  1.00000000e+00,  1.00000000e+00],\n       [ 5.00000000e-01, -1.00000000e+00,  5.00000000e-01]])\n\n\n\npyLHD.adjust_range(random_lhd, 5, 12, digits = 3)\n\narray([[ 6.75,  8.5 ,  5.  ],\n       [12.  ,  6.75,  8.5 ],\n       [ 5.  , 10.25,  6.75],\n       [ 8.5 , 12.  , 12.  ],\n       [10.25,  5.  , 10.25]])"
  },
  {
    "objectID": "docs/OLHD.OLHD_Lin09.html",
    "href": "docs/OLHD.OLHD_Lin09.html",
    "title": "OLHD.OLHD_Lin09",
    "section": "",
    "text": "OLHD.OLHD_Lin09(OLHD, OA)\nOrthogonal Latin Hypercube Design. Based on the construction method of Lin et al. (2009)"
  },
  {
    "objectID": "docs/OLHD.OLHD_Lin09.html#parameters",
    "href": "docs/OLHD.OLHD_Lin09.html#parameters",
    "title": "OLHD.OLHD_Lin09",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nOLHD\n[type]\nAn orthogonal Latin hypercube design with run size (n) and factor size (p), and it will be coupled with the input orthogonal array\nrequired\n\n\nOA\n[type]\nAn orthogonal array, with (n^2) rows, (2f) columns, (n) symbols, strength two and index unity is available, which can be denoted as OA(n^2,2f,n,2)\nrequired"
  },
  {
    "objectID": "docs/OLHD.OLHD_Lin09.html#returns",
    "href": "docs/OLHD.OLHD_Lin09.html#returns",
    "title": "OLHD.OLHD_Lin09",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nOrthogonal Latin hypercube design with the following run size: (n^2) and the following factor size: (2fp)"
  },
  {
    "objectID": "docs/OLHD.OLHD_Lin09.html#examples",
    "href": "docs/OLHD.OLHD_Lin09.html#examples",
    "title": "OLHD.OLHD_Lin09",
    "section": "Examples",
    "text": "Examples\nCreate a 5 by 2 OLHD\n\nimport pyLHD\nOLHD_example = pyLHD.OLHD_Cioppa07(m=2)\n\nCreate an OA(25,6,5,2)\n\nimport numpy as np\nOA_example = np.array([ [2,2,2,2,2,1],[2,1,5,4,3,5],\n                        [3,2,1,5,4,5],[1,5,4,3,2,5],\n                        [4,1,3,5,2,3],[1,2,3,4,5,2],\n                        [1,3,5,2,4,3],[1,1,1,1,1,1],\n                        [4,3,2,1,5,5],[5,5,5,5,5,1],\n                        [4,4,4,4,4,1],[3,1,4,2,5,4],\n                        [3,3,3,3,3,1],[3,5,2,4,1,3],\n                        [3,4,5,1,2,2],[5,4,3,2,1,5],\n                        [2,3,4,5,1,2],[2,5,3,1,4,4],\n                        [1,4,2,5,3,4],[4,2,5,3,1,4],\n                        [2,4,1,3,5,3],[5,3,1,4,2,4],\n                        [5,2,4,1,3,3],[5,1,2,3,4,2],\n                        [4,5,1,2,3,2]   ])\n\nConstruct a 25 by 12 OLHD\n\npyLHD.OLHD_Lin09(OLHD = OLHD_example,OA = OA_example)\n\narray([[ 12.,  -8.,  12.,  -8.,   7.,  -9.,   6.,  -4.,   6.,  -4.,  -9.,\n         -7.],\n       [  7.,  -9.,  -7.,   9., -10.,  -2.,  -9.,  -7.,   9.,   7.,  -5.,\n         -1.],\n       [ 10.,   2.,  -9.,  -7., -11.,   3.,   5.,   1.,  -7.,   9.,  -3.,\n        -11.],\n       [ -9.,  -7.,  -1.,   5.,  -8., -12.,  -7.,   9.,   2., -10.,  -4.,\n         -6.],\n       [  4.,   6., -10.,  -2.,   2., -10.,  -8., -12.,  -5.,  -1.,   1.,\n         -5.],\n       [ 11.,  -3.,  -5.,  -1.,   8.,  12.,   3.,  11.,  10.,   2.,   4.,\n          6.],\n       [  1.,  -5.,   8.,  12.,  -1.,   5.,  -2.,  10.,   4.,   6.,   2.,\n        -10.],\n       [  6.,  -4.,   6.,  -4.,   6.,  -4., -12.,   8., -12.,   8., -12.,\n          8.],\n       [ -1.,   5.,   7.,  -9., -12.,   8.,   2., -10.,  -9.,  -7.,  -6.,\n          4.],\n       [-12.,   8., -12.,   8.,   3.,  11.,  -6.,   4.,  -6.,   4., -11.,\n          3.],\n       [ -6.,   4.,  -6.,   4.,   4.,   6.,  12.,  -8.,  12.,  -8.,  -8.,\n        -12.],\n       [  5.,   1.,   9.,   7.,  -7.,   9., -10.,  -2.,   7.,  -9.,   9.,\n          7.],\n       [  0.,   0.,   0.,   0.,   5.,   1.,   0.,   0.,   0.,   0., -10.,\n         -2.],\n       [-10.,  -2.,  -3., -11.,   1.,  -5.,  -5.,  -1.,  11.,  -3.,  -2.,\n         10.],\n       [ -5.,  -1.,   3.,  11.,  12.,  -8.,  10.,   2., -11.,   3.,   6.,\n         -4.],\n       [ -7.,   9.,  10.,   2.,  -9.,  -7.,   9.,   7.,   5.,   1.,  -7.,\n          9.],\n       [  2., -10., -11.,   3.,  11.,  -3.,   1.,  -5.,  -3., -11.,   3.,\n         11.],\n       [ -8., -12.,   5.,   1.,  -6.,   4.,  -4.,  -6., -10.,  -2.,  12.,\n         -8.],\n       [ -4.,  -6.,  -8., -12.,  -5.,  -1.,   8.,  12.,  -4.,  -6.,  10.,\n          2.],\n       [  9.,   7.,  -2.,  10.,  -4.,  -6.,   7.,  -9.,  -1.,   5.,   8.,\n         12.],\n       [ -3., -11.,   1.,  -5.,  -2.,  10.,  11.,  -3.,  -2.,  10.,  -1.,\n          5.],\n       [ -2.,  10.,  -4.,  -6.,  -3., -11.,  -1.,   5.,   8.,  12.,  11.,\n         -3.],\n       [  8.,  12.,   4.,   6.,   0.,   0.,   4.,   6.,  -8., -12.,   0.,\n          0.],\n       [  3.,  11.,   2., -10.,   9.,   7., -11.,   3.,   1.,  -5.,   7.,\n         -9.],\n       [-11.,   3.,  11.,  -3.,  10.,   2.,  -3., -11.,   3.,  11.,   5.,\n          1.]])"
  },
  {
    "objectID": "docs/criteria.MaxAbsCor.html",
    "href": "docs/criteria.MaxAbsCor.html",
    "title": "criteria.MaxAbsCor",
    "section": "",
    "text": "criteria.MaxAbsCor(arr)\nCalculate the Maximum Absolute Correlation"
  },
  {
    "objectID": "docs/criteria.MaxAbsCor.html#parameters",
    "href": "docs/criteria.MaxAbsCor.html#parameters",
    "title": "criteria.MaxAbsCor",
    "section": "Parameters",
    "text": "Parameters\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnumpy.ndarray\nA design matrix\nrequired"
  },
  {
    "objectID": "docs/criteria.MaxAbsCor.html#returns",
    "href": "docs/criteria.MaxAbsCor.html#returns",
    "title": "criteria.MaxAbsCor",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nfloat\nPositive number indicating maximum absolute correlation. Rounded to 3 digits"
  },
  {
    "objectID": "docs/criteria.MaxAbsCor.html#examples",
    "href": "docs/criteria.MaxAbsCor.html#examples",
    "title": "criteria.MaxAbsCor",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\nrandom_lhd = pyLHD.random_lhd(n_rows=10,n_columns=3)\npyLHD.MaxAbsCor(random_lhd)\n\n0.5272727272727271"
  },
  {
    "objectID": "docs/utils.OA2LHD.html",
    "href": "docs/utils.OA2LHD.html",
    "title": "utils.OA2LHD",
    "section": "",
    "text": "utils.OA2LHD(arr)\nTransform an Orthogonal Array (OA) into an LHD"
  },
  {
    "objectID": "docs/utils.OA2LHD.html#parameters",
    "href": "docs/utils.OA2LHD.html#parameters",
    "title": "utils.OA2LHD",
    "section": "Parameters",
    "text": "Parameters\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnumpy.ndarray\nAn orthogonal array matrix\nrequired"
  },
  {
    "objectID": "docs/utils.OA2LHD.html#returns",
    "href": "docs/utils.OA2LHD.html#returns",
    "title": "utils.OA2LHD",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nLHD whose sizes are the same as input OA. The assumption is that the elements of OAs must be positive"
  },
  {
    "objectID": "docs/utils.OA2LHD.html#examples",
    "href": "docs/utils.OA2LHD.html#examples",
    "title": "utils.OA2LHD",
    "section": "Examples",
    "text": "Examples\nFirst create an OA(9,2,3,2)\n\nimport numpy as np\nexample_OA = np.array([[1,1],[1,2],[1,3],[2,1],\n                       [2,2],[2,3],[3,1],[3,2],[3,3] ])\n\nTransform the “OA” above into a LHD according to Tang (1993)\n\nimport pyLHD\npyLHD.OA2LHD(example_OA)      \n\narray([[3, 2],\n       [1, 4],\n       [2, 8],\n       [6, 1],\n       [4, 5],\n       [5, 7],\n       [8, 3],\n       [9, 6],\n       [7, 9]])"
  },
  {
    "objectID": "docs/utils.scale.html",
    "href": "docs/utils.scale.html",
    "title": "utils.scale",
    "section": "",
    "text": "utils.scale(arr, uniformize=False)\nScales design to be within [0,1]"
  },
  {
    "objectID": "docs/utils.scale.html#parameters",
    "href": "docs/utils.scale.html#parameters",
    "title": "utils.scale",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnumpy.ndarray\nA design matrix\nrequired\n\n\nuniformize\nbool\nIf True, Rosenblatt transformation is applied (uniformize by applying the empirical cumulative distribution). If False (default), scaling is done by using the minimum and maximum value\nFalse"
  },
  {
    "objectID": "docs/utils.scale.html#returns",
    "href": "docs/utils.scale.html#returns",
    "title": "utils.scale",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nThe scaled design"
  },
  {
    "objectID": "docs/utils.scale.html#examples",
    "href": "docs/utils.scale.html#examples",
    "title": "utils.scale",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\nrandom_lhd = pyLHD.random_lhd(n_rows=5,n_columns=3)\npyLHD.scale(random_lhd)\n\narray([[0.25, 0.  , 1.  ],\n       [0.  , 1.  , 0.5 ],\n       [0.75, 0.75, 0.25],\n       [0.5 , 0.25, 0.  ],\n       [1.  , 0.5 , 0.75]])"
  },
  {
    "objectID": "docs/criteria.MaxProCriterion.html",
    "href": "docs/criteria.MaxProCriterion.html",
    "title": "criteria.MaxProCriterion",
    "section": "",
    "text": "criteria.MaxProCriterion(arr)\nCalculate the Maximum Projection Criterion"
  },
  {
    "objectID": "docs/criteria.MaxProCriterion.html#parameters",
    "href": "docs/criteria.MaxProCriterion.html#parameters",
    "title": "criteria.MaxProCriterion",
    "section": "Parameters",
    "text": "Parameters\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnumpy.ndarray\nA design matrix\nrequired"
  },
  {
    "objectID": "docs/criteria.MaxProCriterion.html#returns",
    "href": "docs/criteria.MaxProCriterion.html#returns",
    "title": "criteria.MaxProCriterion",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nfloat\nPositive number indicating maximum projection criterion"
  },
  {
    "objectID": "docs/criteria.MaxProCriterion.html#examples",
    "href": "docs/criteria.MaxProCriterion.html#examples",
    "title": "criteria.MaxProCriterion",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\nrandom_lhd = pyLHD.random_lhd(n_rows=10,n_columns=3)\npyLHD.MaxProCriterion(random_lhd)\n\n25.741924750384985"
  },
  {
    "objectID": "docs/OLHD.OLHD_Cioppa07.html",
    "href": "docs/OLHD.OLHD_Cioppa07.html",
    "title": "OLHD.OLHD_Cioppa07",
    "section": "",
    "text": "OLHD.OLHD_Cioppa07(m)\nOrthogonal Latin Hyercube Design. Based on the construction method of Cioppa and Lucas (2007)"
  },
  {
    "objectID": "docs/OLHD.OLHD_Cioppa07.html#parameters",
    "href": "docs/OLHD.OLHD_Cioppa07.html#parameters",
    "title": "OLHD.OLHD_Cioppa07",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm\nint\nA positive integer, and it must be greater than or equal to 2\nrequired"
  },
  {
    "objectID": "docs/OLHD.OLHD_Cioppa07.html#raises",
    "href": "docs/OLHD.OLHD_Cioppa07.html#raises",
    "title": "OLHD.OLHD_Cioppa07",
    "section": "Raises",
    "text": "Raises\n\n\n\nType\nDescription\n\n\n\n\nValueError\nIf m is not greater than or equal to 2"
  },
  {
    "objectID": "docs/OLHD.OLHD_Cioppa07.html#returns",
    "href": "docs/OLHD.OLHD_Cioppa07.html#returns",
    "title": "OLHD.OLHD_Cioppa07",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nAn orthogonal LHD with the following run size: (n=2^m + 1) and factor size: (k= m+ (m-1 choose 2))"
  },
  {
    "objectID": "docs/OLHD.OLHD_Cioppa07.html#examples",
    "href": "docs/OLHD.OLHD_Cioppa07.html#examples",
    "title": "OLHD.OLHD_Cioppa07",
    "section": "Examples",
    "text": "Examples\nCreate an orthogonal LHD with m=4. So n=2^m+1=17 runs and k=4+3=7 factors\n\nimport pyLHD\npyLHD.OLHD_Cioppa07(m=4)\n\narray([[ 1., -2., -4., -8.,  3.,  7.,  5.],\n       [ 2.,  1., -3., -7., -4., -8.,  6.],\n       [ 3., -4.,  2., -6., -1.,  5., -7.],\n       [ 4.,  3.,  1., -5.,  2., -6., -8.],\n       [ 5., -6., -8.,  4.,  7., -3., -1.],\n       [ 6.,  5., -7.,  3., -8.,  4., -2.],\n       [ 7., -8.,  6.,  2., -5., -1.,  3.],\n       [ 8.,  7.,  5.,  1.,  6.,  2.,  4.],\n       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.],\n       [-1.,  2.,  4.,  8., -3., -7., -5.],\n       [-2., -1.,  3.,  7.,  4.,  8., -6.],\n       [-3.,  4., -2.,  6.,  1., -5.,  7.],\n       [-4., -3., -1.,  5., -2.,  6.,  8.],\n       [-5.,  6.,  8., -4., -7.,  3.,  1.],\n       [-6., -5.,  7., -3.,  8., -4.,  2.],\n       [-7.,  8., -6., -2.,  5.,  1., -3.],\n       [-8., -7., -5., -1., -6., -2., -4.]])\n\n\nCreate an orthogonal LHD with m=5. So n=2^m+1=33 runs and k=5+7=11 factors\n\nimport pyLHD\npyLHD.OLHD_Cioppa07(m=5)\n\narray([[  1.,  -2.,  -4.,  -8., -16.,   3.,   7.,  15.,   5.,  13.,   9.],\n       [  2.,   1.,  -3.,  -7., -15.,  -4.,  -8., -16.,   6.,  14.,  10.],\n       [  3.,  -4.,   2.,  -6., -14.,  -1.,   5.,  13.,  -7., -15.,  11.],\n       [  4.,   3.,   1.,  -5., -13.,   2.,  -6., -14.,  -8., -16.,  12.],\n       [  5.,  -6.,  -8.,   4., -12.,   7.,  -3.,  11.,  -1.,   9., -13.],\n       [  6.,   5.,  -7.,   3., -11.,  -8.,   4., -12.,  -2.,  10., -14.],\n       [  7.,  -8.,   6.,   2., -10.,  -5.,  -1.,   9.,   3., -11., -15.],\n       [  8.,   7.,   5.,   1.,  -9.,   6.,   2., -10.,   4., -12., -16.],\n       [  9., -10., -12., -16.,   8.,  11.,  15.,  -7.,  13.,  -5.,  -1.],\n       [ 10.,   9., -11., -15.,   7., -12., -16.,   8.,  14.,  -6.,  -2.],\n       [ 11., -12.,  10., -14.,   6.,  -9.,  13.,  -5., -15.,   7.,  -3.],\n       [ 12.,  11.,   9., -13.,   5.,  10., -14.,   6., -16.,   8.,  -4.],\n       [ 13., -14., -16.,  12.,   4.,  15., -11.,  -3.,  -9.,  -1.,   5.],\n       [ 14.,  13., -15.,  11.,   3., -16.,  12.,   4., -10.,  -2.,   6.],\n       [ 15., -16.,  14.,  10.,   2., -13.,  -9.,  -1.,  11.,   3.,   7.],\n       [ 16.,  15.,  13.,   9.,   1.,  14.,  10.,   2.,  12.,   4.,   8.],\n       [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],\n       [ -1.,   2.,   4.,   8.,  16.,  -3.,  -7., -15.,  -5., -13.,  -9.],\n       [ -2.,  -1.,   3.,   7.,  15.,   4.,   8.,  16.,  -6., -14., -10.],\n       [ -3.,   4.,  -2.,   6.,  14.,   1.,  -5., -13.,   7.,  15., -11.],\n       [ -4.,  -3.,  -1.,   5.,  13.,  -2.,   6.,  14.,   8.,  16., -12.],\n       [ -5.,   6.,   8.,  -4.,  12.,  -7.,   3., -11.,   1.,  -9.,  13.],\n       [ -6.,  -5.,   7.,  -3.,  11.,   8.,  -4.,  12.,   2., -10.,  14.],\n       [ -7.,   8.,  -6.,  -2.,  10.,   5.,   1.,  -9.,  -3.,  11.,  15.],\n       [ -8.,  -7.,  -5.,  -1.,   9.,  -6.,  -2.,  10.,  -4.,  12.,  16.],\n       [ -9.,  10.,  12.,  16.,  -8., -11., -15.,   7., -13.,   5.,   1.],\n       [-10.,  -9.,  11.,  15.,  -7.,  12.,  16.,  -8., -14.,   6.,   2.],\n       [-11.,  12., -10.,  14.,  -6.,   9., -13.,   5.,  15.,  -7.,   3.],\n       [-12., -11.,  -9.,  13.,  -5., -10.,  14.,  -6.,  16.,  -8.,   4.],\n       [-13.,  14.,  16., -12.,  -4., -15.,  11.,   3.,   9.,   1.,  -5.],\n       [-14., -13.,  15., -11.,  -3.,  16., -12.,  -4.,  10.,   2.,  -6.],\n       [-15.,  16., -14., -10.,  -2.,  13.,   9.,   1., -11.,  -3.,  -7.],\n       [-16., -15., -13.,  -9.,  -1., -14., -10.,  -2., -12.,  -4.,  -8.]])"
  },
  {
    "objectID": "docs/base_designs.permutations_matrix.html",
    "href": "docs/base_designs.permutations_matrix.html",
    "title": "base_designs.permutations_matrix",
    "section": "",
    "text": "base_designs.permutations_matrix(n_rows, n_columns, seed=None)\nGenerate (n_rows x n_columns) matrix, in which each column is a random permutation of {1,2,…,n_rows}"
  },
  {
    "objectID": "docs/base_designs.permutations_matrix.html#parameters",
    "href": "docs/base_designs.permutations_matrix.html#parameters",
    "title": "base_designs.permutations_matrix",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nn_rows\nint\nnumber of rows\nrequired\n\n\nn_columns\nint\nnumber of columns\nrequired\n\n\nseed\nOptional[int]\nIf seed is an int or None, a new numpy.random.Generator is created using np.random.default_rng(seed). Defaults to None.\nNone"
  },
  {
    "objectID": "docs/base_designs.permutations_matrix.html#returns",
    "href": "docs/base_designs.permutations_matrix.html#returns",
    "title": "base_designs.permutations_matrix",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nGenerate (n_rows x n_columns) matrix, in which each column is a random permutation of {1,2,…,n_rows}"
  },
  {
    "objectID": "docs/base_designs.permutations_matrix.html#examples",
    "href": "docs/base_designs.permutations_matrix.html#examples",
    "title": "base_designs.permutations_matrix",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\npyLHD.permutations_matrix(n_rows = 6, n_columns = 3, seed = 1)\n\narray([[4, 6, 1],\n       [5, 2, 5],\n       [6, 3, 6],\n       [1, 4, 2],\n       [3, 5, 4],\n       [2, 1, 3]])"
  },
  {
    "objectID": "docs/criteria.phi_p.html",
    "href": "docs/criteria.phi_p.html",
    "title": "criteria.phi_p",
    "section": "",
    "text": "criteria.phi_p(arr, p=15, q=1)\nCalculate the phi_p Criterion"
  },
  {
    "objectID": "docs/criteria.phi_p.html#parameters",
    "href": "docs/criteria.phi_p.html#parameters",
    "title": "criteria.phi_p",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnumpy.ndarray\nA design matrix\nrequired\n\n\np\nint\nA positive integer, which is the parameter in the phi_p formula. The default is set to be 15. If (q) is 1, (dij) is the Manhattan (rectangular) distance. If (q) is 2, (dij) is the Euclidean distance.\n15"
  },
  {
    "objectID": "docs/criteria.phi_p.html#returns",
    "href": "docs/criteria.phi_p.html#returns",
    "title": "criteria.phi_p",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nfloat\nA positive number indicating phi_p"
  },
  {
    "objectID": "docs/criteria.phi_p.html#examples",
    "href": "docs/criteria.phi_p.html#examples",
    "title": "criteria.phi_p",
    "section": "Examples",
    "text": "Examples\nCalculate the phi_p criterion for random_lhd with default settings\n\nimport pyLHD\nrandom_lhd = pyLHD.random_lhd(n_rows=10,n_columns=3)\npyLHD.phi_p(random_lhd)  \n\n2.5070676852759277\n\n\nCalculate the phi_p criterion of random_lhd with p=50 and q=2 (Euclidean)\n\npyLHD.phi_p(random_lhd,p=50,q=2) \n\n4.082482928549"
  },
  {
    "objectID": "docs/utils.eval_design.html",
    "href": "docs/utils.eval_design.html",
    "title": "utils.eval_design",
    "section": "",
    "text": "utils.eval_design(arr, criteria='phi_p', p=15, q=1)\nEvaluate a design based on a chosen criteria, a simple wrapper for all criteria in pyLHD"
  },
  {
    "objectID": "docs/utils.eval_design.html#parameters",
    "href": "docs/utils.eval_design.html#parameters",
    "title": "utils.eval_design",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnumpy.ndarray\nA design matrix\nrequired\n\n\ncriteria\nstr\nCriteria to choose from. Defaults to ‘phi_p’. Options include ‘phi_p’,‘MaxProCriterion’,‘AvgAbsCor’,‘AvgAbsCor’ p (int): A positive integer, which is the parameter in the phi_p formula. The default is set to be 15 q (int): If (q) is 1, (dij) is the Manhattan (rectangular) distance. If (q) is 2, (dij) is the Euclidean distance.\n'phi_p'"
  },
  {
    "objectID": "docs/utils.eval_design.html#returns",
    "href": "docs/utils.eval_design.html#returns",
    "title": "utils.eval_design",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nfloat\nCalculation of chosen criteria for any LHD"
  },
  {
    "objectID": "docs/utils.eval_design.html#examples",
    "href": "docs/utils.eval_design.html#examples",
    "title": "utils.eval_design",
    "section": "Examples",
    "text": "Examples\nBy default phi_p with p=15 and q=1\n\nimport pyLHD\nrandom_lhd = pyLHD.random_lhd(n_rows=5,n_columns=3)\npyLHD.eval_design(random_lhd)\n\n1.6682049478145113\n\n\nEvaluate design based on MaxProCriterion\n\npyLHD.eval_design(random_lhd,criteria='MaxProCriterion')\n\n13.087473174282277"
  },
  {
    "objectID": "docs/index.html",
    "href": "docs/index.html",
    "title": "Function reference",
    "section": "",
    "text": "Generate Random LHD\n\n\n\nbase_designs.permutations_matrix\nGenerate (n_rows x n_columns) matrix, in which each column is a random permutation of {1,2,…,n_rows}\n\n\nbase_designs.random_lhd\nGenerate a random Latin Hypercube Design\n\n\nbase_designs.GLPdesign\nGood Lattice Point (GLP) Design\n\n\n\n\n\n\nVarious constructions of orthogonal latin hypercube designs\n\n\n\nOLHD.OLHD_Butler01\nOrthogonal Latin Hypercube Design (OLHD). Based on the construction method of Butler (2001)\n\n\nOLHD.OLHD_Sun10\nOrthogonal Latin Hypercube Design (OLHD). Based on the construction method of Sun et al. (2010)\n\n\nOLHD.OLHD_Cioppa07\nOrthogonal Latin Hyercube Design. Based on the construction method of Cioppa and Lucas (2007)\n\n\nOLHD.OLHD_Ye98\nOrthogonal Latin Hyercube Design. Based on the construction method of Ye (1998)\n\n\nOLHD.OLHD_Lin09\nOrthogonal Latin Hypercube Design. Based on the construction method of Lin et al. (2009)\n\n\n\n\n\n\nSpace-filling Criterias for LHD\n\n\n\ncriteria.MaxAbsCor\nCalculate the Maximum Absolute Correlation\n\n\ncriteria.MaxProCriterion\nCalculate the Maximum Projection Criterion\n\n\ncriteria.phi_p\nCalculate the phi_p Criterion\n\n\ncriteria.dij\nCalculate the Inter-site Distance\n\n\ncriteria.AvgAbsCor\nCalculate the Average Absolute Correlation\n\n\ncriteria.discrepancy\nDiscrepancy of a given sample\n\n\ncriteria.coverage\nCompute the coverage measure for a design\n\n\ncriteria.maximin\nCompute the maximin criterion for a given design. A higher value corresponds to a more regular scattering of design points.\n\n\ncriteria.mesh_ratio\nCompute the meshratio criterion for a given design\n\n\n\n\n\n\nmiscellaneous utilities for working with LHDs\n\n\n\nutils.permute_columns\nRandom permute columns in a numpy ndarray\n\n\nutils.exchange\nExchange two random elements in a matrix\n\n\nutils.williams_transform\nWilliams Transformation\n\n\nutils.OA2LHD\nTransform an Orthogonal Array (OA) into an LHD\n\n\nutils.eval_design\nEvaluate a design based on a chosen criteria, a simple wrapper for all criteria in pyLHD\n\n\nutils.adjust_range\nAdjust the range of a design to [min,max]\n\n\nutils.scale\nScales design to be within [0,1]\n\n\nutils.distance_matrix\nDistance matrix based on specified distance measure"
  },
  {
    "objectID": "docs/index.html#base-designs",
    "href": "docs/index.html#base-designs",
    "title": "Function reference",
    "section": "",
    "text": "Generate Random LHD\n\n\n\nbase_designs.permutations_matrix\nGenerate (n_rows x n_columns) matrix, in which each column is a random permutation of {1,2,…,n_rows}\n\n\nbase_designs.random_lhd\nGenerate a random Latin Hypercube Design\n\n\nbase_designs.GLPdesign\nGood Lattice Point (GLP) Design"
  },
  {
    "objectID": "docs/index.html#orthogonal-lhd",
    "href": "docs/index.html#orthogonal-lhd",
    "title": "Function reference",
    "section": "",
    "text": "Various constructions of orthogonal latin hypercube designs\n\n\n\nOLHD.OLHD_Butler01\nOrthogonal Latin Hypercube Design (OLHD). Based on the construction method of Butler (2001)\n\n\nOLHD.OLHD_Sun10\nOrthogonal Latin Hypercube Design (OLHD). Based on the construction method of Sun et al. (2010)\n\n\nOLHD.OLHD_Cioppa07\nOrthogonal Latin Hyercube Design. Based on the construction method of Cioppa and Lucas (2007)\n\n\nOLHD.OLHD_Ye98\nOrthogonal Latin Hyercube Design. Based on the construction method of Ye (1998)\n\n\nOLHD.OLHD_Lin09\nOrthogonal Latin Hypercube Design. Based on the construction method of Lin et al. (2009)"
  },
  {
    "objectID": "docs/index.html#criteria",
    "href": "docs/index.html#criteria",
    "title": "Function reference",
    "section": "",
    "text": "Space-filling Criterias for LHD\n\n\n\ncriteria.MaxAbsCor\nCalculate the Maximum Absolute Correlation\n\n\ncriteria.MaxProCriterion\nCalculate the Maximum Projection Criterion\n\n\ncriteria.phi_p\nCalculate the phi_p Criterion\n\n\ncriteria.dij\nCalculate the Inter-site Distance\n\n\ncriteria.AvgAbsCor\nCalculate the Average Absolute Correlation\n\n\ncriteria.discrepancy\nDiscrepancy of a given sample\n\n\ncriteria.coverage\nCompute the coverage measure for a design\n\n\ncriteria.maximin\nCompute the maximin criterion for a given design. A higher value corresponds to a more regular scattering of design points.\n\n\ncriteria.mesh_ratio\nCompute the meshratio criterion for a given design"
  },
  {
    "objectID": "docs/index.html#utilities",
    "href": "docs/index.html#utilities",
    "title": "Function reference",
    "section": "",
    "text": "miscellaneous utilities for working with LHDs\n\n\n\nutils.permute_columns\nRandom permute columns in a numpy ndarray\n\n\nutils.exchange\nExchange two random elements in a matrix\n\n\nutils.williams_transform\nWilliams Transformation\n\n\nutils.OA2LHD\nTransform an Orthogonal Array (OA) into an LHD\n\n\nutils.eval_design\nEvaluate a design based on a chosen criteria, a simple wrapper for all criteria in pyLHD\n\n\nutils.adjust_range\nAdjust the range of a design to [min,max]\n\n\nutils.scale\nScales design to be within [0,1]\n\n\nutils.distance_matrix\nDistance matrix based on specified distance measure"
  },
  {
    "objectID": "docs/utils.distance_matrix.html",
    "href": "docs/utils.distance_matrix.html",
    "title": "utils.distance_matrix",
    "section": "",
    "text": "utils.distance_matrix(arr, metric='euclidean', p=2)\nDistance matrix based on specified distance measure"
  },
  {
    "objectID": "docs/utils.distance_matrix.html#parameters",
    "href": "docs/utils.distance_matrix.html#parameters",
    "title": "utils.distance_matrix",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnumpy.ndarray\nA design matrix\nrequired\n\n\nmetric\nstr\nSpecifiy the following distance measure: ‘euclidean’: Usual distance between the two vectors (L_2 norm) ‘maximum’: Maximum distance between two components of x and y (supremum norm) ‘manhattan’: Absolute distance between the two vectors (L_1 norm) ‘minkowski’: The p norm, the pth root of the sum of the pth powers of the differences of the components\n'euclidean'\n\n\np\nint\nThe power of the Minkowski distance. Defaults to 2.\n2"
  },
  {
    "objectID": "docs/utils.distance_matrix.html#returns",
    "href": "docs/utils.distance_matrix.html#returns",
    "title": "utils.distance_matrix",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nThe calculated distance matrix baed on specified distance measure"
  },
  {
    "objectID": "docs/utils.distance_matrix.html#examples",
    "href": "docs/utils.distance_matrix.html#examples",
    "title": "utils.distance_matrix",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\nrandom_lhd = pyLHD.random_lhd(n_rows=5,n_columns=3)\npyLHD.distance_matrix(random_lhd)\n\narray([[0.        , 0.34641016, 0.48989795, 0.93808315, 0.6       ],\n       [0.34641016, 0.        , 0.82462113, 1.14891253, 0.93808315],\n       [0.48989795, 0.82462113, 0.        , 0.74833148, 0.34641016],\n       [0.93808315, 1.14891253, 0.74833148, 0.        , 0.91651514],\n       [0.6       , 0.93808315, 0.34641016, 0.91651514, 0.        ]])\n\n\n\npyLHD.distance_matrix(random_lhd, metric = 'manhattan')\n\narray([[0. , 0.6, 0.8, 1.6, 1. ],\n       [0.6, 0. , 1.4, 1.8, 1.6],\n       [0.8, 1.4, 0. , 1.2, 0.6],\n       [1.6, 1.8, 1.2, 0. , 1.4],\n       [1. , 1.6, 0.6, 1.4, 0. ]])\n\n\n\npyLHD.distance_matrix(random_lhd, metric = 'minkowski', p=5)\n\narray([[0.        , 0.24914619, 0.40487949, 0.69806513, 0.46090632],\n       [0.24914619, 0.        , 0.62872057, 0.91904841, 0.69806513],\n       [0.40487949, 0.62872057, 0.        , 0.61547698, 0.24914619],\n       [0.69806513, 0.91904841, 0.61547698, 0.        , 0.80509104],\n       [0.46090632, 0.69806513, 0.24914619, 0.80509104, 0.        ]])"
  },
  {
    "objectID": "docs/OLHD.OLHD_Butler01.html",
    "href": "docs/OLHD.OLHD_Butler01.html",
    "title": "OLHD.OLHD_Butler01",
    "section": "",
    "text": "OLHD.OLHD_Butler01(n_rows, n_columns)\nOrthogonal Latin Hypercube Design (OLHD). Based on the construction method of Butler (2001)"
  },
  {
    "objectID": "docs/OLHD.OLHD_Butler01.html#parameters",
    "href": "docs/OLHD.OLHD_Butler01.html#parameters",
    "title": "OLHD.OLHD_Butler01",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nn_rows\nint\nA positive integer specifying the number of rows\nrequired\n\n\nn_columns\nint\nA postive integer specifying the number of columns\nrequired"
  },
  {
    "objectID": "docs/OLHD.OLHD_Butler01.html#raises",
    "href": "docs/OLHD.OLHD_Butler01.html#raises",
    "title": "OLHD.OLHD_Butler01",
    "section": "Raises",
    "text": "Raises\n\n\n\nType\nDescription\n\n\n\n\nValueError\nIf n_columns is not less than or equal to n_rows\n\n\nValueError\nIf n_rows is not greater than or equal to 3\n\n\nValueError\nIf n_rows is not an odd prime number"
  },
  {
    "objectID": "docs/OLHD.OLHD_Butler01.html#returns",
    "href": "docs/OLHD.OLHD_Butler01.html#returns",
    "title": "OLHD.OLHD_Butler01",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nA (n_rows by n_columns) orthogonal LHD"
  },
  {
    "objectID": "docs/OLHD.OLHD_Butler01.html#examples",
    "href": "docs/OLHD.OLHD_Butler01.html#examples",
    "title": "OLHD.OLHD_Butler01",
    "section": "Examples",
    "text": "Examples\nCreate an orthogonal LHD with n_rows =11 and n_columns =5\n\nimport pyLHD\npyLHD.OLHD_Butler01(n_rows=11,n_columns=5)\n\narray([[ 4.,  5.,  2.,  3.,  1.],\n       [ 2.,  8.,  3., 11.,  7.],\n       [ 1.,  3.,  7.,  4., 10.],\n       [ 3., 10., 11.,  5.,  4.],\n       [ 5.,  1.,  8., 10.,  3.],\n       [ 7., 11.,  4.,  2.,  9.],\n       [ 9.,  2.,  1.,  7.,  8.],\n       [11.,  9.,  5.,  8.,  2.],\n       [10.,  4.,  9.,  1.,  5.],\n       [ 8.,  7., 10.,  9., 11.],\n       [ 6.,  6.,  6.,  6.,  6.]])\n\n\nCreate an orthogonal LHD with n_rows =11 and n_columns =5\n\n pyLHD.OLHD_Butler01(n_rows=7,n_columns=6)\n\narray([[2., 1., 3., 3., 5., 7.],\n       [1., 5., 6., 5., 6., 2.],\n       [3., 6., 1., 7., 2., 5.],\n       [5., 2., 7., 6., 3., 4.],\n       [7., 3., 2., 4., 7., 3.],\n       [6., 7., 5., 2., 4., 6.],\n       [4., 4., 4., 1., 1., 1.]])"
  },
  {
    "objectID": "docs/examples/notebooks/intro_pyLHD.html",
    "href": "docs/examples/notebooks/intro_pyLHD.html",
    "title": "1. Introduction to pyLHD",
    "section": "",
    "text": "pyLHD is a python implementation of the R package LHD by Hongzhi Wang, Qian Xiao, Abhyuday Mandal. As of now, only the algebraic construction of Latin hypercube designs (LHD) are implemented in this package. For search algorithms to construct LHDs such as: Simulated annealing, particle swarm optimization, and genetic algorithms refer to the R package.\nIn section 2 algebraic construction methods for LHDs are discussed\nTo evalute the generated LHDs we consider the following criteria"
  },
  {
    "objectID": "docs/examples/notebooks/intro_pyLHD.html#algebraic-construction-functions",
    "href": "docs/examples/notebooks/intro_pyLHD.html#algebraic-construction-functions",
    "title": "1. Introduction to pyLHD",
    "section": "2. Algebraic Construction Functions",
    "text": "2. Algebraic Construction Functions\nThe algebraic construction methods are demonstrated in the table below\n\n\n\n\n\n\n\n\n\n\n\n\n\nYe98\nCioppa07\nSun10\nTang93\nLin09\nButler01\n\n\n\n\nRun # \\(n\\)\n\\(2^m +1\\)\n\\(2^m +1\\)\n\\(r2^{m +1}\\) or \\(r2^{m +1} +1\\)\n\\(n\\)\n\\(n^2\\)\n\\(n\\)\n\n\nFactor # \\(k\\)\n\\(2m-2\\)\n\\(m + {m-1 \\choose 2}\\)\n\\(2^c\\)\n\\(m\\)\n\\(2fp\\)\n\\(k \\leq n-1\\)\n\n\nNote\n\\(m\\) is a positive integer \\(m\\geq 2\\)\n\\(m\\) is a positive integer \\(m\\geq 2\\)\n\\(r\\) and \\(c\\) are positive integers\n\\(n\\) and \\(m\\) are from \\(OA(n,m,s,r)\\)\n\\(n^2,2f\\) and \\(p\\) are from \\(OA(n^2,2f,n,2)\\) and \\(OLHD(n,p)\\)\n\\(n\\) is an odd prime number\n\n\n\nFor theoretical details on the construction methods, a good overview is Section 4.2: Algebraic Constuctions for Orthogonal LHDs from Musings about Constructions of Efficient Latin Hypercube Designs with Flexible Run-sizes\nWe start by implementing Ye 1998 construction, the resulting desig will have \\(2^m+1\\) runs and \\(2m-2\\) factors\n\nYe98 = pyLHD.OLHD_Ye98(m=4)\nYe98\n\narray([[ 7., -1., -4., -2.,  3.,  8.],\n       [ 1.,  7., -5., -3., -2., -6.],\n       [ 5., -4.,  1., -6., -8.,  3.],\n       [ 4.,  5.,  7., -8.,  6., -2.],\n       [ 8., -6., -2.,  4.,  5., -7.],\n       [ 6.,  8., -3.,  5., -4.,  1.],\n       [ 3., -2.,  6.,  1., -7., -5.],\n       [ 2.,  3.,  8.,  7.,  1.,  4.],\n       [ 0.,  0.,  0.,  0.,  0.,  0.],\n       [-7.,  1.,  4.,  2., -3., -8.],\n       [-1., -7.,  5.,  3.,  2.,  6.],\n       [-5.,  4., -1.,  6.,  8., -3.],\n       [-4., -5., -7.,  8., -6.,  2.],\n       [-8.,  6.,  2., -4., -5.,  7.],\n       [-6., -8.,  3., -5.,  4., -1.],\n       [-3.,  2., -6., -1.,  7.,  5.],\n       [-2., -3., -8., -7., -1., -4.]])\n\n\n\npyLHD.MaxAbsCor(Ye98) # column-wise correlation are 0\n\n0.0\n\n\nCioppa and Lucas 2007 construction, the resulting design will be a \\(2^m+1\\) by \\(m+ {m-1 \\choose 2}\\) orthogonal LHD. Note \\(m \\geq 2\\)\n\nCioppa07 = pyLHD.OLHD_Cioppa07(m=3)\nCioppa07\n\narray([[ 1., -2., -4.,  3.],\n       [ 2.,  1., -3., -4.],\n       [ 3., -4.,  2., -1.],\n       [ 4.,  3.,  1.,  2.],\n       [ 0.,  0.,  0.,  0.],\n       [-1.,  2.,  4., -3.],\n       [-2., -1.,  3.,  4.],\n       [-3.,  4., -2.,  1.],\n       [-4., -3., -1., -2.]])\n\n\n\npyLHD.MaxAbsCor(Cioppa07) # column-wise correlation are 0\n\n0.0\n\n\nSun et al. 2010 construction, the resulting design will be \\(r2^{c+1}\\) by \\(2^c\\) if type=‘even’. If type=‘odd’ the resulting design will be \\(r2^{c+1} + 1\\) by \\(2^c\\), where \\(r\\) and \\(c\\) are positive integers.\n\nSun10_odd = pyLHD.OLHD_Sun10(C=2,r=2,type='odd')\nSun10_odd\n\narray([[ 1.,  2.,  3.,  4.],\n       [ 2., -1., -4.,  3.],\n       [ 3.,  4., -1., -2.],\n       [ 4., -3.,  2., -1.],\n       [ 5.,  6.,  7.,  8.],\n       [ 6., -5., -8.,  7.],\n       [ 7.,  8., -5., -6.],\n       [ 8., -7.,  6., -5.],\n       [ 0.,  0.,  0.,  0.],\n       [-1., -2., -3., -4.],\n       [-2.,  1.,  4., -3.],\n       [-3., -4.,  1.,  2.],\n       [-4.,  3., -2.,  1.],\n       [-5., -6., -7., -8.],\n       [-6.,  5.,  8., -7.],\n       [-7., -8.,  5.,  6.],\n       [-8.,  7., -6.,  5.]])\n\n\n\nSun10_even = pyLHD.OLHD_Sun10(C=2,r=2,type='even')\nSun10_even\n\narray([[ 0.5,  1.5,  2.5,  3.5],\n       [ 1.5, -0.5, -3.5,  2.5],\n       [ 2.5,  3.5, -0.5, -1.5],\n       [ 3.5, -2.5,  1.5, -0.5],\n       [ 4.5,  5.5,  6.5,  7.5],\n       [ 5.5, -4.5, -7.5,  6.5],\n       [ 6.5,  7.5, -4.5, -5.5],\n       [ 7.5, -6.5,  5.5, -4.5],\n       [-0.5, -1.5, -2.5, -3.5],\n       [-1.5,  0.5,  3.5, -2.5],\n       [-2.5, -3.5,  0.5,  1.5],\n       [-3.5,  2.5, -1.5,  0.5],\n       [-4.5, -5.5, -6.5, -7.5],\n       [-5.5,  4.5,  7.5, -6.5],\n       [-6.5, -7.5,  4.5,  5.5],\n       [-7.5,  6.5, -5.5,  4.5]])\n\n\nLine et al. 2009 construction, the resulting design will be \\(n^2\\) by \\(2fp\\). This is obtained by using a \\(n\\) by \\(p\\) orthogonal LHD with a \\(n^2\\) by \\(2f\\) strength 2 and level \\(n\\) orthogonal array.\nStart by generating an orthogonal LHD\n\nOLHD_example = pyLHD.OLHD_Cioppa07(m=2)\n\nNext, create an orthogonal array with 25 rows, 6 columns, 5 levels, and strength 2 OA(25,6,5,2)\n\nimport numpy as np\n\nOA_example = np.array([[2,2,2,2,2,1],[2,1,5,4,3,5],\n                      [3,2,1,5,4,5],[1,5,4,3,2,5],\n                      [4,1,3,5,2,3],[1,2,3,4,5,2],\n                      [1,3,5,2,4,3],[1,1,1,1,1,1],\n                      [4,3,2,1,5,5],[5,5,5,5,5,1],\n                      [4,4,4,4,4,1],[3,1,4,2,5,4],\n                      [3,3,3,3,3,1],[3,5,2,4,1,3],\n                      [3,4,5,1,2,2],[5,4,3,2,1,5],\n                      [2,3,4,5,1,2],[2,5,3,1,4,4],\n                      [1,4,2,5,3,4],[4,2,5,3,1,4],\n                      [2,4,1,3,5,3],[5,3,1,4,2,4],\n                      [5,2,4,1,3,3],[5,1,2,3,4,2],\n                      [4,5,1,2,3,2] ])\n\nNow using Lin at al. 2009 construction, we couple OLHD and OA to obtain\n\nLin09 = pyLHD.OLHD_Lin09(OLHD=OLHD_example,OA=OA_example)\nLin09\n\narray([[ 12.,  -8.,  12.,  -8.,   7.,  -9.,   6.,  -4.,   6.,  -4.,  -9.,\n         -7.],\n       [  7.,  -9.,  -7.,   9., -10.,  -2.,  -9.,  -7.,   9.,   7.,  -5.,\n         -1.],\n       [ 10.,   2.,  -9.,  -7., -11.,   3.,   5.,   1.,  -7.,   9.,  -3.,\n        -11.],\n       [ -9.,  -7.,  -1.,   5.,  -8., -12.,  -7.,   9.,   2., -10.,  -4.,\n         -6.],\n       [  4.,   6., -10.,  -2.,   2., -10.,  -8., -12.,  -5.,  -1.,   1.,\n         -5.],\n       [ 11.,  -3.,  -5.,  -1.,   8.,  12.,   3.,  11.,  10.,   2.,   4.,\n          6.],\n       [  1.,  -5.,   8.,  12.,  -1.,   5.,  -2.,  10.,   4.,   6.,   2.,\n        -10.],\n       [  6.,  -4.,   6.,  -4.,   6.,  -4., -12.,   8., -12.,   8., -12.,\n          8.],\n       [ -1.,   5.,   7.,  -9., -12.,   8.,   2., -10.,  -9.,  -7.,  -6.,\n          4.],\n       [-12.,   8., -12.,   8.,   3.,  11.,  -6.,   4.,  -6.,   4., -11.,\n          3.],\n       [ -6.,   4.,  -6.,   4.,   4.,   6.,  12.,  -8.,  12.,  -8.,  -8.,\n        -12.],\n       [  5.,   1.,   9.,   7.,  -7.,   9., -10.,  -2.,   7.,  -9.,   9.,\n          7.],\n       [  0.,   0.,   0.,   0.,   5.,   1.,   0.,   0.,   0.,   0., -10.,\n         -2.],\n       [-10.,  -2.,  -3., -11.,   1.,  -5.,  -5.,  -1.,  11.,  -3.,  -2.,\n         10.],\n       [ -5.,  -1.,   3.,  11.,  12.,  -8.,  10.,   2., -11.,   3.,   6.,\n         -4.],\n       [ -7.,   9.,  10.,   2.,  -9.,  -7.,   9.,   7.,   5.,   1.,  -7.,\n          9.],\n       [  2., -10., -11.,   3.,  11.,  -3.,   1.,  -5.,  -3., -11.,   3.,\n         11.],\n       [ -8., -12.,   5.,   1.,  -6.,   4.,  -4.,  -6., -10.,  -2.,  12.,\n         -8.],\n       [ -4.,  -6.,  -8., -12.,  -5.,  -1.,   8.,  12.,  -4.,  -6.,  10.,\n          2.],\n       [  9.,   7.,  -2.,  10.,  -4.,  -6.,   7.,  -9.,  -1.,   5.,   8.,\n         12.],\n       [ -3., -11.,   1.,  -5.,  -2.,  10.,  11.,  -3.,  -2.,  10.,  -1.,\n          5.],\n       [ -2.,  10.,  -4.,  -6.,  -3., -11.,  -1.,   5.,   8.,  12.,  11.,\n         -3.],\n       [  8.,  12.,   4.,   6.,   0.,   0.,   4.,   6.,  -8., -12.,   0.,\n          0.],\n       [  3.,  11.,   2., -10.,   9.,   7., -11.,   3.,   1.,  -5.,   7.,\n         -9.],\n       [-11.,   3.,  11.,  -3.,  10.,   2.,  -3., -11.,   3.,  11.,   5.,\n          1.]])\n\n\nWe can convert an orthogonal array into a LHD using the function OA2LHD. Consider the earlier OA_example with 25 rows and 6 columns.\n\npyLHD.OA2LHD(OA_example)\n\narray([[ 9,  7,  6,  9,  8,  5],\n       [ 6,  3, 23, 18, 12, 21],\n       [14,  9,  3, 23, 18, 25],\n       [ 4, 23, 19, 11, 10, 22],\n       [16,  2, 15, 24,  9, 13],\n       [ 1,  6, 14, 20, 22,  7],\n       [ 3, 14, 21,  6, 16, 15],\n       [ 5,  1,  5,  3,  2,  3],\n       [20, 13,  9,  1, 25, 23],\n       [23, 24, 22, 25, 23,  1],\n       [19, 18, 20, 17, 20,  2],\n       [12,  4, 18, 10, 24, 20],\n       [11, 15, 11, 13, 15,  4],\n       [13, 21,  8, 19,  5, 14],\n       [15, 19, 24,  2,  7,  8],\n       [25, 17, 12,  7,  4, 24],\n       [10, 11, 17, 21,  1, 10],\n       [ 8, 22, 13,  4, 17, 17],\n       [ 2, 20, 10, 22, 14, 19],\n       [17,  8, 25, 15,  3, 18],\n       [ 7, 16,  1, 14, 21, 11],\n       [22, 12,  2, 16,  6, 16],\n       [24, 10, 16,  5, 13, 12],\n       [21,  5,  7, 12, 19,  9],\n       [18, 25,  4,  8, 11,  6]])\n\n\nLastly, we consider Butler 2001 construction by generating a \\(n\\) by \\(k\\) OLHD\n\nButler01 = pyLHD.OLHD_Butler01(n_rows=11,n_columns=5)\nButler01\n\narray([[ 1.,  5.,  4.,  2.,  3.],\n       [ 7.,  8.,  2.,  3., 11.],\n       [10.,  3.,  1.,  7.,  4.],\n       [ 4., 10.,  3., 11.,  5.],\n       [ 3.,  1.,  5.,  8., 10.],\n       [ 9., 11.,  7.,  4.,  2.],\n       [ 8.,  2.,  9.,  1.,  7.],\n       [ 2.,  9., 11.,  5.,  8.],\n       [ 5.,  4., 10.,  9.,  1.],\n       [11.,  7.,  8., 10.,  9.],\n       [ 6.,  6.,  6.,  6.,  6.]])"
  },
  {
    "objectID": "docs/base_designs.random_lhd.html",
    "href": "docs/base_designs.random_lhd.html",
    "title": "base_designs.random_lhd",
    "section": "",
    "text": "base_designs.random_lhd(n_rows, n_columns, scramble=True, seed=None)\nGenerate a random Latin Hypercube Design"
  },
  {
    "objectID": "docs/base_designs.random_lhd.html#parameters",
    "href": "docs/base_designs.random_lhd.html#parameters",
    "title": "base_designs.random_lhd",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nn_rows\nint\nnumber of rows\nrequired\n\n\nn_columns\nint\nnumber of columns (dimnesion of parameter space)\nrequired\n\n\nscramble\nOptional[bool]\nWhen False, center samples within cells of a multi-dimensional grid. Otherwise, samples are randomly placed within cells of the grid. Defaults to True.\nTrue\n\n\nseed\nOptional[int]\nIf seed is an int or None, a new numpy.random.Generator is created using np.random.default_rng(seed). Defaults to None.\nNone"
  },
  {
    "objectID": "docs/base_designs.random_lhd.html#returns",
    "href": "docs/base_designs.random_lhd.html#returns",
    "title": "base_designs.random_lhd",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nA Latin hypercube sample of \\(n =\\) n_rows points generated in \\([0,1)^d\\), where \\(d\\)=n_columns. Each univariate marginal distribution is stratisfied, placing exactly one point in \\([j/n,(j+1)/n)\\) for \\(j=0,1,\\dots,n-1\\)"
  },
  {
    "objectID": "docs/base_designs.random_lhd.html#examples",
    "href": "docs/base_designs.random_lhd.html#examples",
    "title": "base_designs.random_lhd",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\npyLHD.random_lhd(n_rows = 5, n_columns = 3, seed = 1)\n\narray([[0.69763568, 0.29763568, 0.09763568],\n       [0.89763568, 0.49763568, 0.89763568],\n       [0.09763568, 0.69763568, 0.29763568],\n       [0.49763568, 0.89763568, 0.69763568],\n       [0.29763568, 0.09763568, 0.49763568]])\n\n\n\npyLHD.random_lhd(n_rows = 5, n_columns = 3, seed = 1, scramble = False)\n\narray([[0.7, 0.3, 0.1],\n       [0.9, 0.5, 0.9],\n       [0.1, 0.7, 0.3],\n       [0.5, 0.9, 0.7],\n       [0.3, 0.1, 0.5]])"
  },
  {
    "objectID": "docs/criteria.maximin.html",
    "href": "docs/criteria.maximin.html",
    "title": "criteria.maximin",
    "section": "",
    "text": "criteria.maximin(arr)\nCompute the maximin criterion for a given design. A higher value corresponds to a more regular scattering of design points."
  },
  {
    "objectID": "docs/criteria.maximin.html#parameters",
    "href": "docs/criteria.maximin.html#parameters",
    "title": "criteria.maximin",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnumpy.ndarray\nA design matrix. If design matrix is not within [0,1], the origianl design will be scaled to [0,1]\nrequired"
  },
  {
    "objectID": "docs/criteria.maximin.html#returns",
    "href": "docs/criteria.maximin.html#returns",
    "title": "criteria.maximin",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nfloat\nCalculated maximin criterion"
  },
  {
    "objectID": "docs/criteria.maximin.html#examples",
    "href": "docs/criteria.maximin.html#examples",
    "title": "criteria.maximin",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\nrandom_lhd = pyLHD.random_lhd(n_rows=5,n_columns=5)\npyLHD.maximin(random_lhd)\n\n0.7483314773547883"
  },
  {
    "objectID": "docs/criteria.discrepancy.html",
    "href": "docs/criteria.discrepancy.html",
    "title": "criteria.discrepancy",
    "section": "",
    "text": "criteria.discrepancy(arr, method='centered_L2')\nDiscrepancy of a given sample"
  },
  {
    "objectID": "docs/criteria.discrepancy.html#parameters",
    "href": "docs/criteria.discrepancy.html#parameters",
    "title": "criteria.discrepancy",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnumpy.ndarray\nA design matrix\nrequired\n\n\nmethod\nstr\nType of discrepancy. Defaults to ‘centered_L2’. Options include: ‘L2’, ‘L2_star’,‘centered_L2’, ‘modified_L2’, ‘mixture_L2’, ‘symmetric_L2’, ‘wrap_around_L2’\n'centered_L2'"
  },
  {
    "objectID": "docs/criteria.discrepancy.html#raises",
    "href": "docs/criteria.discrepancy.html#raises",
    "title": "criteria.discrepancy",
    "section": "Raises",
    "text": "Raises\n\n\n\nType\nDescription\n\n\n\n\nValueError\nWhenever number of rows is less than number of columns"
  },
  {
    "objectID": "docs/criteria.discrepancy.html#returns",
    "href": "docs/criteria.discrepancy.html#returns",
    "title": "criteria.discrepancy",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nfloat\nDesired discrepancy type"
  },
  {
    "objectID": "docs/criteria.discrepancy.html#examples",
    "href": "docs/criteria.discrepancy.html#examples",
    "title": "criteria.discrepancy",
    "section": "Examples",
    "text": "Examples\nCalculate the centered_L2 discrepancy of random_lhd\n\nimport pyLHD\nrandom_lhd = pyLHD.random_lhd(n_rows=10,n_columns=3)\npyLHD.discrepancy(random_lhd)\n\n0.1375408205245153\n\n\nCalculate the L2 star discrepancy of random_lhd\n\npyLHD.discrepancy(random_lhd,method='L2_star')\n\n0.09406347068315245"
  },
  {
    "objectID": "docs/OLHD.OLHD_Ye98.html",
    "href": "docs/OLHD.OLHD_Ye98.html",
    "title": "OLHD.OLHD_Ye98",
    "section": "",
    "text": "OLHD.OLHD_Ye98(m)\nOrthogonal Latin Hyercube Design. Based on the construction method of Ye (1998)"
  },
  {
    "objectID": "docs/OLHD.OLHD_Ye98.html#parameters",
    "href": "docs/OLHD.OLHD_Ye98.html#parameters",
    "title": "OLHD.OLHD_Ye98",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm\nint\nA positive integer, and it must be greater than or equal to 2\nrequired"
  },
  {
    "objectID": "docs/OLHD.OLHD_Ye98.html#raises",
    "href": "docs/OLHD.OLHD_Ye98.html#raises",
    "title": "OLHD.OLHD_Ye98",
    "section": "Raises",
    "text": "Raises\n\n\n\nType\nDescription\n\n\n\n\nValueError\nIf m is not greater than or equal to 2"
  },
  {
    "objectID": "docs/OLHD.OLHD_Ye98.html#returns",
    "href": "docs/OLHD.OLHD_Ye98.html#returns",
    "title": "OLHD.OLHD_Ye98",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnpt.ArrayLike\nAn orthogonal LHD with the following run size: (n=2^m + 1) and factor size: (k=2m-2)"
  },
  {
    "objectID": "docs/OLHD.OLHD_Ye98.html#examples",
    "href": "docs/OLHD.OLHD_Ye98.html#examples",
    "title": "OLHD.OLHD_Ye98",
    "section": "Examples",
    "text": "Examples\nCreate an orthogonal LHD with m=4. So n=2^m+1=9 runs and k=2*m-2=4 factors\n\nimport pyLHD\npyLHD.OLHD_Ye98(m=3)\n\narray([[ 1., -2., -3.,  4.],\n       [ 2.,  1., -4., -3.],\n       [ 4., -3.,  2., -1.],\n       [ 3.,  4.,  1.,  2.],\n       [ 0.,  0.,  0.,  0.],\n       [-1.,  2.,  3., -4.],\n       [-2., -1.,  4.,  3.],\n       [-4.,  3., -2.,  1.],\n       [-3., -4., -1., -2.]])\n\n\nCreate an orthogonal LHD with m=5. So n=2^m+1=17 runs and k=2*m-2=6 factors\n\npyLHD.OLHD_Ye98(m=4)\n\narray([[ 6., -4., -2., -8.,  5.,  3.],\n       [ 4.,  6., -7., -5., -8., -1.],\n       [ 7., -2.,  4., -1., -3.,  5.],\n       [ 2.,  7.,  6., -3.,  1., -8.],\n       [ 3., -1., -8.,  2.,  7., -6.],\n       [ 1.,  3., -5.,  7., -2.,  4.],\n       [ 5., -8.,  1.,  4., -6., -7.],\n       [ 8.,  5.,  3.,  6.,  4.,  2.],\n       [ 0.,  0.,  0.,  0.,  0.,  0.],\n       [-6.,  4.,  2.,  8., -5., -3.],\n       [-4., -6.,  7.,  5.,  8.,  1.],\n       [-7.,  2., -4.,  1.,  3., -5.],\n       [-2., -7., -6.,  3., -1.,  8.],\n       [-3.,  1.,  8., -2., -7.,  6.],\n       [-1., -3.,  5., -7.,  2., -4.],\n       [-5.,  8., -1., -4.,  6.,  7.],\n       [-8., -5., -3., -6., -4., -2.]])"
  },
  {
    "objectID": "docs/criteria.mesh_ratio.html",
    "href": "docs/criteria.mesh_ratio.html",
    "title": "criteria.mesh_ratio",
    "section": "",
    "text": "criteria.mesh_ratio(arr)\nCompute the meshratio criterion for a given design"
  },
  {
    "objectID": "docs/criteria.mesh_ratio.html#parameters",
    "href": "docs/criteria.mesh_ratio.html#parameters",
    "title": "criteria.mesh_ratio",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\narr\nnumpy.ndarray\nA design matrix. If design matrix is not within [0,1], the origianl design will be scaled to [0,1]\nrequired"
  },
  {
    "objectID": "docs/criteria.mesh_ratio.html#raises",
    "href": "docs/criteria.mesh_ratio.html#raises",
    "title": "criteria.mesh_ratio",
    "section": "Raises",
    "text": "Raises\n\n\n\nType\nDescription\n\n\n\n\nValueError\nWhenever number of rows is less than number of columns"
  },
  {
    "objectID": "docs/criteria.mesh_ratio.html#returns",
    "href": "docs/criteria.mesh_ratio.html#returns",
    "title": "criteria.mesh_ratio",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\nfloat\nCalculated meshratio"
  },
  {
    "objectID": "docs/criteria.mesh_ratio.html#examples",
    "href": "docs/criteria.mesh_ratio.html#examples",
    "title": "criteria.mesh_ratio",
    "section": "Examples",
    "text": "Examples\n\nimport pyLHD\nrandom_lhd = pyLHD.random_lhd(n_rows=5,n_columns=5)\npyLHD.mesh_ratio(random_lhd)\n\n1.3301243435223524"
  },
  {
    "objectID": "REFERENCES.html",
    "href": "REFERENCES.html",
    "title": "",
    "section": "",
    "text": "AvgAbsCor: Georgiou, Stelios D. “Orthogonal Latin hypercube designs from generalized orthogonal designs.” Journal of Statistical Planning and Inference 139.4 (2009): 1530-1540\ncoverage: Gunzburer M., Burkdart J. (2004) Uniformity measures for point samples in hypercubes, https://people.sc.fsu.edu/~jburkardt/.\ndiscrepancy: Fang K.T, Li R. and Sudjianto A. (2006) Design and Modeling for Computer Experiments, Chapman & Hall\nGLPdesign: Korobov, A. N. “The approximate computation of multiple integrals.” Dokl. Akad. Nauk SSSR. Vol. 124. 1959\nMaxAbsCor: Georgiou, Stelios D. “Orthogonal Latin hypercube designs from generalized orthogonal designs.” Journal of Statistical Planning and Inference 139.4 (2009): 1530-1540\nMaxProCriterion: Joseph, V. Roshan, Evren Gul, and Shan Ba. “Maximum projection designs for computer experiments.” Biometrika 102.2 (2015): 371-380\nminimax: Jonshon M.E., Moore L.M. and Ylvisaker D. (1990), Minmax and maximin distance designs, J. of Statis. Planning and Inference, 26, 131-148\nOA2LHD: Tang, Boxin. “Orthogonal array-based Latin hypercubes.” Journal of the American statistical association 88.424 (1993): 1392-1397\nOLHD_Butler01: Butler, Neil A. “Optimal and orthogonal Latin hypercube designs for computer experiments.” Biometrika 88.3 (2001): 847-857\nOLHD_Cioppa07: Cioppa, Thomas M., and Thomas W. Lucas. “Efficient nearly orthogonal and space-filling Latin hypercubes.” Technometrics 49.1 (2007): 45-55\nOLHD_Lin09: Lin, C. Devon, Rahul Mukerjee, and Boxin Tang. “Construction of orthogonal and nearly orthogonal Latin hypercubes.” Biometrika 96.1 (2009): 243-247\nOLHD_Sun10: Sun, Fasheng, Min-Qian Liu, and Dennis KJ Lin. “Construction of orthogonal Latin hypercube designs with flexible run sizes.” Journal of Statistical Planning and Inference 140.11 (2010): 3236-3242\nOLHD_Ye98: Ye, Kenny Q. “Orthogonal column Latin hypercubes and their application in computer experiments.” Journal of the American Statistical Association 93.444 (1998): 1430-1439\nphi_p: Jin, Ruichen, Wei Chen, and Agus Sudjianto. “An efficient algorithm for constructing optimal design of computer experiments.” International Design Engineering Technical Conferences and Computers and Information in Engineering Conference. Vol. 37009. 2003\nwilliams_transform: Williams, Evan James. “Experimental designs balanced for the estimation of residual effects of treatments.” Australian Journal of Chemistry 2.2 (1949): 149-168"
  },
  {
    "objectID": "REFERENCES.html#references-for-functions-in-pylhd",
    "href": "REFERENCES.html#references-for-functions-in-pylhd",
    "title": "",
    "section": "",
    "text": "AvgAbsCor: Georgiou, Stelios D. “Orthogonal Latin hypercube designs from generalized orthogonal designs.” Journal of Statistical Planning and Inference 139.4 (2009): 1530-1540\ncoverage: Gunzburer M., Burkdart J. (2004) Uniformity measures for point samples in hypercubes, https://people.sc.fsu.edu/~jburkardt/.\ndiscrepancy: Fang K.T, Li R. and Sudjianto A. (2006) Design and Modeling for Computer Experiments, Chapman & Hall\nGLPdesign: Korobov, A. N. “The approximate computation of multiple integrals.” Dokl. Akad. Nauk SSSR. Vol. 124. 1959\nMaxAbsCor: Georgiou, Stelios D. “Orthogonal Latin hypercube designs from generalized orthogonal designs.” Journal of Statistical Planning and Inference 139.4 (2009): 1530-1540\nMaxProCriterion: Joseph, V. Roshan, Evren Gul, and Shan Ba. “Maximum projection designs for computer experiments.” Biometrika 102.2 (2015): 371-380\nminimax: Jonshon M.E., Moore L.M. and Ylvisaker D. (1990), Minmax and maximin distance designs, J. of Statis. Planning and Inference, 26, 131-148\nOA2LHD: Tang, Boxin. “Orthogonal array-based Latin hypercubes.” Journal of the American statistical association 88.424 (1993): 1392-1397\nOLHD_Butler01: Butler, Neil A. “Optimal and orthogonal Latin hypercube designs for computer experiments.” Biometrika 88.3 (2001): 847-857\nOLHD_Cioppa07: Cioppa, Thomas M., and Thomas W. Lucas. “Efficient nearly orthogonal and space-filling Latin hypercubes.” Technometrics 49.1 (2007): 45-55\nOLHD_Lin09: Lin, C. Devon, Rahul Mukerjee, and Boxin Tang. “Construction of orthogonal and nearly orthogonal Latin hypercubes.” Biometrika 96.1 (2009): 243-247\nOLHD_Sun10: Sun, Fasheng, Min-Qian Liu, and Dennis KJ Lin. “Construction of orthogonal Latin hypercube designs with flexible run sizes.” Journal of Statistical Planning and Inference 140.11 (2010): 3236-3242\nOLHD_Ye98: Ye, Kenny Q. “Orthogonal column Latin hypercubes and their application in computer experiments.” Journal of the American Statistical Association 93.444 (1998): 1430-1439\nphi_p: Jin, Ruichen, Wei Chen, and Agus Sudjianto. “An efficient algorithm for constructing optimal design of computer experiments.” International Design Engineering Technical Conferences and Computers and Information in Engineering Conference. Vol. 37009. 2003\nwilliams_transform: Williams, Evan James. “Experimental designs balanced for the estimation of residual effects of treatments.” Australian Journal of Chemistry 2.2 (1949): 149-168"
  }
]